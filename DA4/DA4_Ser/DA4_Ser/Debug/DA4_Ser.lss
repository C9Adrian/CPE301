
DA4_Ser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000737  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000293  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004e  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initatePWM>:
    }
}

void initatePWM()
{
	ICR1 = 4999;
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	93 e1       	ldi	r25, 0x13	; 19
  84:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  88:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	TCCR1A = (1<<COM1A1)|(1<<WGM11);		//set Timer 1 to top of TCR1, FAST PWM
  8c:	82 e8       	ldi	r24, 0x82	; 130
  8e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);		//
  92:	8b e1       	ldi	r24, 0x1B	; 27
  94:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  98:	08 95       	ret

0000009a <ADCinit>:
}

void ADCinit()
{
	//SET ADC0 as an input
	DDRC |= (0<<PC0);
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	87 b9       	out	0x07, r24	; 7

	//PWM pin (OC1A)
	DDRB |= (1<<PB1);
  9e:	21 9a       	sbi	0x04, 1	; 4
	
	//SET AVcc with external capacitor at AREF
	ADMUX = 0x60;
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//Turn on the ADC for conversion
	ADCSRA = 0x87;
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	//Run in Free mode
	ADCSRB = 0x00;
  ac:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  b0:	08 95       	ret

000000b2 <main>:
int main(void)
{
	unsigned short val;			//hold the value from ADC
	float servo;				//hold the servo position

	ADCinit();
  b2:	0e 94 4d 00 	call	0x9a	; 0x9a <ADCinit>
	initatePWM();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <initatePWM>

    while (1) 
    {
		ADCSRA |= (1<<ADSC);		//start ADC Conversion
  ba:	ca e7       	ldi	r28, 0x7A	; 122
  bc:	d0 e0       	ldi	r29, 0x00	; 0
		//wait for conversion
		while((ADCSRA & (1<<ADIF)) == 0);

		if(!(val == (ADCH<<1)))
  be:	0f 2e       	mov	r0, r31
  c0:	f9 e7       	ldi	r31, 0x79	; 121
  c2:	ef 2e       	mov	r14, r31
  c4:	f1 2c       	mov	r15, r1
  c6:	f0 2d       	mov	r31, r0

		//OCR1A gets the value from servo
		if(servo < SER_MIN)
			OCR1A = SER_MIN;
		else
			OCR1A = (int)servo;
  c8:	0f 2e       	mov	r0, r31
  ca:	f8 e8       	ldi	r31, 0x88	; 136
  cc:	cf 2e       	mov	r12, r31
  ce:	d1 2c       	mov	r13, r1
  d0:	f0 2d       	mov	r31, r0
		servo = SER_position(val);//get voltage
		servo = (servo * 438)+97; //get positon

		//OCR1A gets the value from servo
		if(servo < SER_MIN)
			OCR1A = SER_MIN;
  d2:	0f 2e       	mov	r0, r31
  d4:	f1 e6       	ldi	r31, 0x61	; 97
  d6:	af 2e       	mov	r10, r31
  d8:	b1 2c       	mov	r11, r1
  da:	f0 2d       	mov	r31, r0
	ADCinit();
	initatePWM();

    while (1) 
    {
		ADCSRA |= (1<<ADSC);		//start ADC Conversion
  dc:	88 81       	ld	r24, Y
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	88 83       	st	Y, r24
		//wait for conversion
		while((ADCSRA & (1<<ADIF)) == 0);
  e2:	88 81       	ld	r24, Y
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x30>

		if(!(val == (ADCH<<1)))
  e8:	f7 01       	movw	r30, r14
  ea:	80 81       	ld	r24, Z
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	08 17       	cp	r16, r24
  f4:	19 07       	cpc	r17, r25
  f6:	29 f0       	breq	.+10     	; 0x102 <main+0x50>
		{
			val = ADCH<<1;	//take the value from the upper bits of ADC
  f8:	00 81       	ld	r16, Z
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	00 0f       	add	r16, r16
  fe:	11 1f       	adc	r17, r17
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x52>
 102:	8c 01       	movw	r16, r24
		}

		servo = SER_position(val);//get voltage
		servo = (servo * 438)+97; //get positon
 104:	b8 01       	movw	r22, r16
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	60 0f       	add	r22, r16
 110:	71 1f       	adc	r23, r17
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__floatunsisf>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e8       	ldi	r20, 0x80	; 128
 120:	5a e3       	ldi	r21, 0x3A	; 58
 122:	0e 94 0f 02 	call	0x41e	; 0x41e <__mulsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	4b ed       	ldi	r20, 0xDB	; 219
 12c:	53 e4       	ldi	r21, 0x43	; 67
 12e:	0e 94 0f 02 	call	0x41e	; 0x41e <__mulsf3>
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	42 ec       	ldi	r20, 0xC2	; 194
 138:	52 e4       	ldi	r21, 0x42	; 66
 13a:	0e 94 b6 00 	call	0x16c	; 0x16c <__addsf3>
 13e:	2b 01       	movw	r4, r22
 140:	3c 01       	movw	r6, r24

		//OCR1A gets the value from servo
		if(servo < SER_MIN)
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	42 ec       	ldi	r20, 0xC2	; 194
 148:	52 e4       	ldi	r21, 0x42	; 66
 14a:	0e 94 22 01 	call	0x244	; 0x244 <__cmpsf2>
 14e:	88 23       	and	r24, r24
 150:	24 f4       	brge	.+8      	; 0x15a <main+0xa8>
			OCR1A = SER_MIN;
 152:	f6 01       	movw	r30, r12
 154:	b1 82       	std	Z+1, r11	; 0x01
 156:	a0 82       	st	Z, r10
 158:	c1 cf       	rjmp	.-126    	; 0xdc <main+0x2a>
		else
			OCR1A = (int)servo;
 15a:	c3 01       	movw	r24, r6
 15c:	b2 01       	movw	r22, r4
 15e:	0e 94 27 01 	call	0x24e	; 0x24e <__fixsfsi>
 162:	f6 01       	movw	r30, r12
 164:	71 83       	std	Z+1, r23	; 0x01
 166:	60 83       	st	Z, r22
 168:	b9 cf       	rjmp	.-142    	; 0xdc <main+0x2a>

0000016a <__subsf3>:
 16a:	50 58       	subi	r21, 0x80	; 128

0000016c <__addsf3>:
 16c:	bb 27       	eor	r27, r27
 16e:	aa 27       	eor	r26, r26
 170:	0e 94 cd 00 	call	0x19a	; 0x19a <__addsf3x>
 174:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__fp_round>
 178:	0e 94 c7 01 	call	0x38e	; 0x38e <__fp_pscA>
 17c:	38 f0       	brcs	.+14     	; 0x18c <__addsf3+0x20>
 17e:	0e 94 ce 01 	call	0x39c	; 0x39c <__fp_pscB>
 182:	20 f0       	brcs	.+8      	; 0x18c <__addsf3+0x20>
 184:	39 f4       	brne	.+14     	; 0x194 <__addsf3+0x28>
 186:	9f 3f       	cpi	r25, 0xFF	; 255
 188:	19 f4       	brne	.+6      	; 0x190 <__addsf3+0x24>
 18a:	26 f4       	brtc	.+8      	; 0x194 <__addsf3+0x28>
 18c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__fp_nan>
 190:	0e f4       	brtc	.+2      	; 0x194 <__addsf3+0x28>
 192:	e0 95       	com	r30
 194:	e7 fb       	bst	r30, 7
 196:	0c 94 be 01 	jmp	0x37c	; 0x37c <__fp_inf>

0000019a <__addsf3x>:
 19a:	e9 2f       	mov	r30, r25
 19c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fp_split3>
 1a0:	58 f3       	brcs	.-42     	; 0x178 <__addsf3+0xc>
 1a2:	ba 17       	cp	r27, r26
 1a4:	62 07       	cpc	r22, r18
 1a6:	73 07       	cpc	r23, r19
 1a8:	84 07       	cpc	r24, r20
 1aa:	95 07       	cpc	r25, r21
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <__addsf3x+0x1c>
 1ae:	79 f4       	brne	.+30     	; 0x1ce <__addsf3x+0x34>
 1b0:	a6 f5       	brtc	.+104    	; 0x21a <__addsf3x+0x80>
 1b2:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_zero>
 1b6:	0e f4       	brtc	.+2      	; 0x1ba <__addsf3x+0x20>
 1b8:	e0 95       	com	r30
 1ba:	0b 2e       	mov	r0, r27
 1bc:	ba 2f       	mov	r27, r26
 1be:	a0 2d       	mov	r26, r0
 1c0:	0b 01       	movw	r0, r22
 1c2:	b9 01       	movw	r22, r18
 1c4:	90 01       	movw	r18, r0
 1c6:	0c 01       	movw	r0, r24
 1c8:	ca 01       	movw	r24, r20
 1ca:	a0 01       	movw	r20, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	ff 27       	eor	r31, r31
 1d0:	59 1b       	sub	r21, r25
 1d2:	99 f0       	breq	.+38     	; 0x1fa <__addsf3x+0x60>
 1d4:	59 3f       	cpi	r21, 0xF9	; 249
 1d6:	50 f4       	brcc	.+20     	; 0x1ec <__addsf3x+0x52>
 1d8:	50 3e       	cpi	r21, 0xE0	; 224
 1da:	68 f1       	brcs	.+90     	; 0x236 <__addsf3x+0x9c>
 1dc:	1a 16       	cp	r1, r26
 1de:	f0 40       	sbci	r31, 0x00	; 0
 1e0:	a2 2f       	mov	r26, r18
 1e2:	23 2f       	mov	r18, r19
 1e4:	34 2f       	mov	r19, r20
 1e6:	44 27       	eor	r20, r20
 1e8:	58 5f       	subi	r21, 0xF8	; 248
 1ea:	f3 cf       	rjmp	.-26     	; 0x1d2 <__addsf3x+0x38>
 1ec:	46 95       	lsr	r20
 1ee:	37 95       	ror	r19
 1f0:	27 95       	ror	r18
 1f2:	a7 95       	ror	r26
 1f4:	f0 40       	sbci	r31, 0x00	; 0
 1f6:	53 95       	inc	r21
 1f8:	c9 f7       	brne	.-14     	; 0x1ec <__addsf3x+0x52>
 1fa:	7e f4       	brtc	.+30     	; 0x21a <__addsf3x+0x80>
 1fc:	1f 16       	cp	r1, r31
 1fe:	ba 0b       	sbc	r27, r26
 200:	62 0b       	sbc	r22, r18
 202:	73 0b       	sbc	r23, r19
 204:	84 0b       	sbc	r24, r20
 206:	ba f0       	brmi	.+46     	; 0x236 <__addsf3x+0x9c>
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	a1 f0       	breq	.+40     	; 0x234 <__addsf3x+0x9a>
 20c:	ff 0f       	add	r31, r31
 20e:	bb 1f       	adc	r27, r27
 210:	66 1f       	adc	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	88 1f       	adc	r24, r24
 216:	c2 f7       	brpl	.-16     	; 0x208 <__addsf3x+0x6e>
 218:	0e c0       	rjmp	.+28     	; 0x236 <__addsf3x+0x9c>
 21a:	ba 0f       	add	r27, r26
 21c:	62 1f       	adc	r22, r18
 21e:	73 1f       	adc	r23, r19
 220:	84 1f       	adc	r24, r20
 222:	48 f4       	brcc	.+18     	; 0x236 <__addsf3x+0x9c>
 224:	87 95       	ror	r24
 226:	77 95       	ror	r23
 228:	67 95       	ror	r22
 22a:	b7 95       	ror	r27
 22c:	f7 95       	ror	r31
 22e:	9e 3f       	cpi	r25, 0xFE	; 254
 230:	08 f0       	brcs	.+2      	; 0x234 <__addsf3x+0x9a>
 232:	b0 cf       	rjmp	.-160    	; 0x194 <__addsf3+0x28>
 234:	93 95       	inc	r25
 236:	88 0f       	add	r24, r24
 238:	08 f0       	brcs	.+2      	; 0x23c <__addsf3x+0xa2>
 23a:	99 27       	eor	r25, r25
 23c:	ee 0f       	add	r30, r30
 23e:	97 95       	ror	r25
 240:	87 95       	ror	r24
 242:	08 95       	ret

00000244 <__cmpsf2>:
 244:	0e 94 9a 01 	call	0x334	; 0x334 <__fp_cmp>
 248:	08 f4       	brcc	.+2      	; 0x24c <__cmpsf2+0x8>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret

0000024e <__fixsfsi>:
 24e:	0e 94 2e 01 	call	0x25c	; 0x25c <__fixunssfsi>
 252:	68 94       	set
 254:	b1 11       	cpse	r27, r1
 256:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_szero>
 25a:	08 95       	ret

0000025c <__fixunssfsi>:
 25c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__fp_splitA>
 260:	88 f0       	brcs	.+34     	; 0x284 <__fixunssfsi+0x28>
 262:	9f 57       	subi	r25, 0x7F	; 127
 264:	98 f0       	brcs	.+38     	; 0x28c <__fixunssfsi+0x30>
 266:	b9 2f       	mov	r27, r25
 268:	99 27       	eor	r25, r25
 26a:	b7 51       	subi	r27, 0x17	; 23
 26c:	b0 f0       	brcs	.+44     	; 0x29a <__fixunssfsi+0x3e>
 26e:	e1 f0       	breq	.+56     	; 0x2a8 <__fixunssfsi+0x4c>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	88 1f       	adc	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	1a f0       	brmi	.+6      	; 0x280 <__fixunssfsi+0x24>
 27a:	ba 95       	dec	r27
 27c:	c9 f7       	brne	.-14     	; 0x270 <__fixunssfsi+0x14>
 27e:	14 c0       	rjmp	.+40     	; 0x2a8 <__fixunssfsi+0x4c>
 280:	b1 30       	cpi	r27, 0x01	; 1
 282:	91 f0       	breq	.+36     	; 0x2a8 <__fixunssfsi+0x4c>
 284:	0e 94 08 02 	call	0x410	; 0x410 <__fp_zero>
 288:	b1 e0       	ldi	r27, 0x01	; 1
 28a:	08 95       	ret
 28c:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_zero>
 290:	67 2f       	mov	r22, r23
 292:	78 2f       	mov	r23, r24
 294:	88 27       	eor	r24, r24
 296:	b8 5f       	subi	r27, 0xF8	; 248
 298:	39 f0       	breq	.+14     	; 0x2a8 <__fixunssfsi+0x4c>
 29a:	b9 3f       	cpi	r27, 0xF9	; 249
 29c:	cc f3       	brlt	.-14     	; 0x290 <__fixunssfsi+0x34>
 29e:	86 95       	lsr	r24
 2a0:	77 95       	ror	r23
 2a2:	67 95       	ror	r22
 2a4:	b3 95       	inc	r27
 2a6:	d9 f7       	brne	.-10     	; 0x29e <__fixunssfsi+0x42>
 2a8:	3e f4       	brtc	.+14     	; 0x2b8 <__fixunssfsi+0x5c>
 2aa:	90 95       	com	r25
 2ac:	80 95       	com	r24
 2ae:	70 95       	com	r23
 2b0:	61 95       	neg	r22
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	8f 4f       	sbci	r24, 0xFF	; 255
 2b6:	9f 4f       	sbci	r25, 0xFF	; 255
 2b8:	08 95       	ret

000002ba <__floatunsisf>:
 2ba:	e8 94       	clt
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <__floatsisf+0x12>

000002be <__floatsisf>:
 2be:	97 fb       	bst	r25, 7
 2c0:	3e f4       	brtc	.+14     	; 0x2d0 <__floatsisf+0x12>
 2c2:	90 95       	com	r25
 2c4:	80 95       	com	r24
 2c6:	70 95       	com	r23
 2c8:	61 95       	neg	r22
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	8f 4f       	sbci	r24, 0xFF	; 255
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	99 23       	and	r25, r25
 2d2:	a9 f0       	breq	.+42     	; 0x2fe <__floatsisf+0x40>
 2d4:	f9 2f       	mov	r31, r25
 2d6:	96 e9       	ldi	r25, 0x96	; 150
 2d8:	bb 27       	eor	r27, r27
 2da:	93 95       	inc	r25
 2dc:	f6 95       	lsr	r31
 2de:	87 95       	ror	r24
 2e0:	77 95       	ror	r23
 2e2:	67 95       	ror	r22
 2e4:	b7 95       	ror	r27
 2e6:	f1 11       	cpse	r31, r1
 2e8:	f8 cf       	rjmp	.-16     	; 0x2da <__floatsisf+0x1c>
 2ea:	fa f4       	brpl	.+62     	; 0x32a <__floatsisf+0x6c>
 2ec:	bb 0f       	add	r27, r27
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <__floatsisf+0x36>
 2f0:	60 ff       	sbrs	r22, 0
 2f2:	1b c0       	rjmp	.+54     	; 0x32a <__floatsisf+0x6c>
 2f4:	6f 5f       	subi	r22, 0xFF	; 255
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	16 c0       	rjmp	.+44     	; 0x32a <__floatsisf+0x6c>
 2fe:	88 23       	and	r24, r24
 300:	11 f0       	breq	.+4      	; 0x306 <__floatsisf+0x48>
 302:	96 e9       	ldi	r25, 0x96	; 150
 304:	11 c0       	rjmp	.+34     	; 0x328 <__floatsisf+0x6a>
 306:	77 23       	and	r23, r23
 308:	21 f0       	breq	.+8      	; 0x312 <__floatsisf+0x54>
 30a:	9e e8       	ldi	r25, 0x8E	; 142
 30c:	87 2f       	mov	r24, r23
 30e:	76 2f       	mov	r23, r22
 310:	05 c0       	rjmp	.+10     	; 0x31c <__floatsisf+0x5e>
 312:	66 23       	and	r22, r22
 314:	71 f0       	breq	.+28     	; 0x332 <__floatsisf+0x74>
 316:	96 e8       	ldi	r25, 0x86	; 134
 318:	86 2f       	mov	r24, r22
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	2a f0       	brmi	.+10     	; 0x32a <__floatsisf+0x6c>
 320:	9a 95       	dec	r25
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	da f7       	brpl	.-10     	; 0x320 <__floatsisf+0x62>
 32a:	88 0f       	add	r24, r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	97 f9       	bld	r25, 7
 332:	08 95       	ret

00000334 <__fp_cmp>:
 334:	99 0f       	add	r25, r25
 336:	00 08       	sbc	r0, r0
 338:	55 0f       	add	r21, r21
 33a:	aa 0b       	sbc	r26, r26
 33c:	e0 e8       	ldi	r30, 0x80	; 128
 33e:	fe ef       	ldi	r31, 0xFE	; 254
 340:	16 16       	cp	r1, r22
 342:	17 06       	cpc	r1, r23
 344:	e8 07       	cpc	r30, r24
 346:	f9 07       	cpc	r31, r25
 348:	c0 f0       	brcs	.+48     	; 0x37a <__fp_cmp+0x46>
 34a:	12 16       	cp	r1, r18
 34c:	13 06       	cpc	r1, r19
 34e:	e4 07       	cpc	r30, r20
 350:	f5 07       	cpc	r31, r21
 352:	98 f0       	brcs	.+38     	; 0x37a <__fp_cmp+0x46>
 354:	62 1b       	sub	r22, r18
 356:	73 0b       	sbc	r23, r19
 358:	84 0b       	sbc	r24, r20
 35a:	95 0b       	sbc	r25, r21
 35c:	39 f4       	brne	.+14     	; 0x36c <__fp_cmp+0x38>
 35e:	0a 26       	eor	r0, r26
 360:	61 f0       	breq	.+24     	; 0x37a <__fp_cmp+0x46>
 362:	23 2b       	or	r18, r19
 364:	24 2b       	or	r18, r20
 366:	25 2b       	or	r18, r21
 368:	21 f4       	brne	.+8      	; 0x372 <__fp_cmp+0x3e>
 36a:	08 95       	ret
 36c:	0a 26       	eor	r0, r26
 36e:	09 f4       	brne	.+2      	; 0x372 <__fp_cmp+0x3e>
 370:	a1 40       	sbci	r26, 0x01	; 1
 372:	a6 95       	lsr	r26
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	81 1d       	adc	r24, r1
 378:	81 1d       	adc	r24, r1
 37a:	08 95       	ret

0000037c <__fp_inf>:
 37c:	97 f9       	bld	r25, 7
 37e:	9f 67       	ori	r25, 0x7F	; 127
 380:	80 e8       	ldi	r24, 0x80	; 128
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	08 95       	ret

00000388 <__fp_nan>:
 388:	9f ef       	ldi	r25, 0xFF	; 255
 38a:	80 ec       	ldi	r24, 0xC0	; 192
 38c:	08 95       	ret

0000038e <__fp_pscA>:
 38e:	00 24       	eor	r0, r0
 390:	0a 94       	dec	r0
 392:	16 16       	cp	r1, r22
 394:	17 06       	cpc	r1, r23
 396:	18 06       	cpc	r1, r24
 398:	09 06       	cpc	r0, r25
 39a:	08 95       	ret

0000039c <__fp_pscB>:
 39c:	00 24       	eor	r0, r0
 39e:	0a 94       	dec	r0
 3a0:	12 16       	cp	r1, r18
 3a2:	13 06       	cpc	r1, r19
 3a4:	14 06       	cpc	r1, r20
 3a6:	05 06       	cpc	r0, r21
 3a8:	08 95       	ret

000003aa <__fp_round>:
 3aa:	09 2e       	mov	r0, r25
 3ac:	03 94       	inc	r0
 3ae:	00 0c       	add	r0, r0
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <__fp_round+0xc>
 3b2:	88 23       	and	r24, r24
 3b4:	52 f0       	brmi	.+20     	; 0x3ca <__fp_round+0x20>
 3b6:	bb 0f       	add	r27, r27
 3b8:	40 f4       	brcc	.+16     	; 0x3ca <__fp_round+0x20>
 3ba:	bf 2b       	or	r27, r31
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <__fp_round+0x18>
 3be:	60 ff       	sbrs	r22, 0
 3c0:	04 c0       	rjmp	.+8      	; 0x3ca <__fp_round+0x20>
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	8f 4f       	sbci	r24, 0xFF	; 255
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__fp_split3>:
 3cc:	57 fd       	sbrc	r21, 7
 3ce:	90 58       	subi	r25, 0x80	; 128
 3d0:	44 0f       	add	r20, r20
 3d2:	55 1f       	adc	r21, r21
 3d4:	59 f0       	breq	.+22     	; 0x3ec <__fp_splitA+0x10>
 3d6:	5f 3f       	cpi	r21, 0xFF	; 255
 3d8:	71 f0       	breq	.+28     	; 0x3f6 <__fp_splitA+0x1a>
 3da:	47 95       	ror	r20

000003dc <__fp_splitA>:
 3dc:	88 0f       	add	r24, r24
 3de:	97 fb       	bst	r25, 7
 3e0:	99 1f       	adc	r25, r25
 3e2:	61 f0       	breq	.+24     	; 0x3fc <__fp_splitA+0x20>
 3e4:	9f 3f       	cpi	r25, 0xFF	; 255
 3e6:	79 f0       	breq	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e8:	87 95       	ror	r24
 3ea:	08 95       	ret
 3ec:	12 16       	cp	r1, r18
 3ee:	13 06       	cpc	r1, r19
 3f0:	14 06       	cpc	r1, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	f2 cf       	rjmp	.-28     	; 0x3da <__fp_split3+0xe>
 3f6:	46 95       	lsr	r20
 3f8:	f1 df       	rcall	.-30     	; 0x3dc <__fp_splitA>
 3fa:	08 c0       	rjmp	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fc:	16 16       	cp	r1, r22
 3fe:	17 06       	cpc	r1, r23
 400:	18 06       	cpc	r1, r24
 402:	99 1f       	adc	r25, r25
 404:	f1 cf       	rjmp	.-30     	; 0x3e8 <__fp_splitA+0xc>
 406:	86 95       	lsr	r24
 408:	71 05       	cpc	r23, r1
 40a:	61 05       	cpc	r22, r1
 40c:	08 94       	sec
 40e:	08 95       	ret

00000410 <__fp_zero>:
 410:	e8 94       	clt

00000412 <__fp_szero>:
 412:	bb 27       	eor	r27, r27
 414:	66 27       	eor	r22, r22
 416:	77 27       	eor	r23, r23
 418:	cb 01       	movw	r24, r22
 41a:	97 f9       	bld	r25, 7
 41c:	08 95       	ret

0000041e <__mulsf3>:
 41e:	0e 94 22 02 	call	0x444	; 0x444 <__mulsf3x>
 422:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__fp_round>
 426:	0e 94 c7 01 	call	0x38e	; 0x38e <__fp_pscA>
 42a:	38 f0       	brcs	.+14     	; 0x43a <__mulsf3+0x1c>
 42c:	0e 94 ce 01 	call	0x39c	; 0x39c <__fp_pscB>
 430:	20 f0       	brcs	.+8      	; 0x43a <__mulsf3+0x1c>
 432:	95 23       	and	r25, r21
 434:	11 f0       	breq	.+4      	; 0x43a <__mulsf3+0x1c>
 436:	0c 94 be 01 	jmp	0x37c	; 0x37c <__fp_inf>
 43a:	0c 94 c4 01 	jmp	0x388	; 0x388 <__fp_nan>
 43e:	11 24       	eor	r1, r1
 440:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_szero>

00000444 <__mulsf3x>:
 444:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fp_split3>
 448:	70 f3       	brcs	.-36     	; 0x426 <__mulsf3+0x8>

0000044a <__mulsf3_pse>:
 44a:	95 9f       	mul	r25, r21
 44c:	c1 f3       	breq	.-16     	; 0x43e <__mulsf3+0x20>
 44e:	95 0f       	add	r25, r21
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	55 1f       	adc	r21, r21
 454:	62 9f       	mul	r22, r18
 456:	f0 01       	movw	r30, r0
 458:	72 9f       	mul	r23, r18
 45a:	bb 27       	eor	r27, r27
 45c:	f0 0d       	add	r31, r0
 45e:	b1 1d       	adc	r27, r1
 460:	63 9f       	mul	r22, r19
 462:	aa 27       	eor	r26, r26
 464:	f0 0d       	add	r31, r0
 466:	b1 1d       	adc	r27, r1
 468:	aa 1f       	adc	r26, r26
 46a:	64 9f       	mul	r22, r20
 46c:	66 27       	eor	r22, r22
 46e:	b0 0d       	add	r27, r0
 470:	a1 1d       	adc	r26, r1
 472:	66 1f       	adc	r22, r22
 474:	82 9f       	mul	r24, r18
 476:	22 27       	eor	r18, r18
 478:	b0 0d       	add	r27, r0
 47a:	a1 1d       	adc	r26, r1
 47c:	62 1f       	adc	r22, r18
 47e:	73 9f       	mul	r23, r19
 480:	b0 0d       	add	r27, r0
 482:	a1 1d       	adc	r26, r1
 484:	62 1f       	adc	r22, r18
 486:	83 9f       	mul	r24, r19
 488:	a0 0d       	add	r26, r0
 48a:	61 1d       	adc	r22, r1
 48c:	22 1f       	adc	r18, r18
 48e:	74 9f       	mul	r23, r20
 490:	33 27       	eor	r19, r19
 492:	a0 0d       	add	r26, r0
 494:	61 1d       	adc	r22, r1
 496:	23 1f       	adc	r18, r19
 498:	84 9f       	mul	r24, r20
 49a:	60 0d       	add	r22, r0
 49c:	21 1d       	adc	r18, r1
 49e:	82 2f       	mov	r24, r18
 4a0:	76 2f       	mov	r23, r22
 4a2:	6a 2f       	mov	r22, r26
 4a4:	11 24       	eor	r1, r1
 4a6:	9f 57       	subi	r25, 0x7F	; 127
 4a8:	50 40       	sbci	r21, 0x00	; 0
 4aa:	9a f0       	brmi	.+38     	; 0x4d2 <__mulsf3_pse+0x88>
 4ac:	f1 f0       	breq	.+60     	; 0x4ea <__mulsf3_pse+0xa0>
 4ae:	88 23       	and	r24, r24
 4b0:	4a f0       	brmi	.+18     	; 0x4c4 <__mulsf3_pse+0x7a>
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	bb 1f       	adc	r27, r27
 4b8:	66 1f       	adc	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	91 50       	subi	r25, 0x01	; 1
 4c0:	50 40       	sbci	r21, 0x00	; 0
 4c2:	a9 f7       	brne	.-22     	; 0x4ae <__mulsf3_pse+0x64>
 4c4:	9e 3f       	cpi	r25, 0xFE	; 254
 4c6:	51 05       	cpc	r21, r1
 4c8:	80 f0       	brcs	.+32     	; 0x4ea <__mulsf3_pse+0xa0>
 4ca:	0c 94 be 01 	jmp	0x37c	; 0x37c <__fp_inf>
 4ce:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_szero>
 4d2:	5f 3f       	cpi	r21, 0xFF	; 255
 4d4:	e4 f3       	brlt	.-8      	; 0x4ce <__mulsf3_pse+0x84>
 4d6:	98 3e       	cpi	r25, 0xE8	; 232
 4d8:	d4 f3       	brlt	.-12     	; 0x4ce <__mulsf3_pse+0x84>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b7 95       	ror	r27
 4e2:	f7 95       	ror	r31
 4e4:	e7 95       	ror	r30
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	c1 f7       	brne	.-16     	; 0x4da <__mulsf3_pse+0x90>
 4ea:	fe 2b       	or	r31, r30
 4ec:	88 0f       	add	r24, r24
 4ee:	91 1d       	adc	r25, r1
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>

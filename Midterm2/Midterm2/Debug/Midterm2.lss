
Midterm2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000f74  00001008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080011a  0080011a  00001022  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d0d  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a69  00000000  00000000  00002f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac6  00000000  00000000  0000396e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00004434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000728  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011c5  00000000  00000000  00004f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000610d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart0_init_>:
void print_double(double data)
{
	char datastring[30] = {0};
	sprintf(datastring, "%f", data);
	printm(datastring);
}
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	80 83       	st	Z, r24
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	10 82       	st	Z, r1
  d4:	80 81       	ld	r24, Z
  d6:	86 60       	ori	r24, 0x06	; 6
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <putChar_>:
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	19 f4       	brne	.+6      	; 0xea <putChar_+0xe>
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	0e 94 6e 00 	call	0xdc	; 0xdc <putChar_>
  ea:	e0 ec       	ldi	r30, 0xC0	; 192
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	85 ff       	sbrs	r24, 5
  f2:	fd cf       	rjmp	.-6      	; 0xee <putChar_+0x12>
  f4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <printm>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
 102:	88 81       	ld	r24, Y
 104:	88 23       	and	r24, r24
 106:	31 f0       	breq	.+12     	; 0x114 <printm+0x18>
 108:	21 96       	adiw	r28, 0x01	; 1
 10a:	0e 94 6e 00 	call	0xdc	; 0xdc <putChar_>
 10e:	89 91       	ld	r24, Y+
 110:	81 11       	cpse	r24, r1
 112:	fb cf       	rjmp	.-10     	; 0x10a <printm+0xe>
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <setup_rf>:
	}

	return 0;
}

nRF24L01 *setup_rf(void) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
 11e:	0e 94 80 01 	call	0x300	; 0x300 <nRF24L01_init>
 122:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	99 83       	std	Y+1, r25	; 0x01
 12a:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
 12c:	22 e0       	ldi	r18, 0x02	; 2
 12e:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
 130:	9c 83       	std	Y+4, r25	; 0x04
 132:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
 138:	9f 83       	std	Y+7, r25	; 0x07
 13a:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
 13c:	25 e0       	ldi	r18, 0x05	; 5
 13e:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
 140:	9a 87       	std	Y+10, r25	; 0x0a
 142:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
 144:	23 e0       	ldi	r18, 0x03	; 3
 146:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
 148:	9d 87       	std	Y+13, r25	; 0x0d
 14a:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
 150:	e9 e6       	ldi	r30, 0x69	; 105
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
 15a:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <nRF24L01_begin>
	return rf;
}
 162:	ce 01       	movw	r24, r28
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <setup_timer>:

// setup timer to trigger interrupt every second when at 1MHz
void setup_timer(void) {
	TCCR1B |= _BV(WGM12);
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
 174:	af e6       	ldi	r26, 0x6F	; 111
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	8c 91       	ld	r24, X
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	8c 93       	st	X, r24
	OCR1A = 15624;
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	9d e3       	ldi	r25, 0x3D	; 61
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= _BV(CS10) | _BV(CS11);
 18a:	80 81       	ld	r24, Z
 18c:	83 60       	ori	r24, 0x03	; 3
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <main>:
volatile bool rf_interrupt = false;
volatile bool send_message = false;
volatile int temp;
char outs[3];

int main(void) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	a8 97       	sbiw	r28, 0x28	; 40
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
	usart0_init_();
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <usart0_init_>
	int i;
	uint8_t to_address[5] = { 0x11, 0x11, 0x11, 0x11, 0x11 };
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	e6 e0       	ldi	r30, 0x06	; 6
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	de 01       	movw	r26, r28
 1b2:	11 96       	adiw	r26, 0x01	; 1
 1b4:	01 90       	ld	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	8a 95       	dec	r24
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x22>
	DDRC = 0x00;
 1bc:	17 b8       	out	0x07, r1	; 7
	sei();
 1be:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 1c0:	0e 94 8d 00 	call	0x11a	; 0x11a <setup_rf>
 1c4:	7c 01       	movw	r14, r24
	setup_timer();
 1c6:	0e 94 b5 00 	call	0x16a	; 0x16a <setup_timer>
		}

		if (send_message) {
			send_message = false;
			nRF24L01Message msg;
			sprintf(outs, "%d" ,  temp);
 1ca:	0f 2e       	mov	r0, r31
 1cc:	fb e0       	ldi	r31, 0x0B	; 11
 1ce:	8f 2e       	mov	r8, r31
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	9f 2e       	mov	r9, r31
 1d4:	f0 2d       	mov	r31, r0
 1d6:	0f 2e       	mov	r0, r31
 1d8:	fc e1       	ldi	r31, 0x1C	; 28
 1da:	cf 2e       	mov	r12, r31
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	df 2e       	mov	r13, r31
 1e0:	f0 2d       	mov	r31, r0
			memcpy(msg.data, outs, 3);
			msg.length = strlen((char *)msg.data) + 1;
 1e2:	5e 01       	movw	r10, r28
 1e4:	28 e0       	ldi	r18, 0x08	; 8
 1e6:	a2 0e       	add	r10, r18
 1e8:	b1 1c       	adc	r11, r1
volatile bool rf_interrupt = false;
volatile bool send_message = false;
volatile int temp;
char outs[3];

int main(void) {
 1ea:	05 e0       	ldi	r16, 0x05	; 5
 1ec:	10 e0       	ldi	r17, 0x00	; 0

	while (true) {
		for(i = 0; i < 5;i++)
		{

			printm("72\n");
 1ee:	81 e1       	ldi	r24, 0x11	; 17
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	93 ed       	ldi	r25, 0xD3	; 211
 1fa:	e0 e3       	ldi	r30, 0x30	; 48
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e0 40       	sbci	r30, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x6a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x74>
 206:	00 00       	nop
 208:	01 50       	subi	r16, 0x01	; 1
 20a:	11 09       	sbc	r17, r1
	sei();
	nRF24L01 *rf = setup_rf();
	setup_timer();

	while (true) {
		for(i = 0; i < 5;i++)
 20c:	81 f7       	brne	.-32     	; 0x1ee <main+0x5c>
 20e:	05 e0       	ldi	r16, 0x05	; 5
 210:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(1000);
		}
		for(i = 0; i < 5;i++)
		{

			printm("74\n");
 212:	85 e1       	ldi	r24, 0x15	; 21
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>
 21a:	ff ef       	ldi	r31, 0xFF	; 255
 21c:	23 ed       	ldi	r18, 0xD3	; 211
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	f1 50       	subi	r31, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x8e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x98>
 22a:	00 00       	nop
 22c:	01 50       	subi	r16, 0x01	; 1
 22e:	11 09       	sbc	r17, r1
		{

			printm("72\n");
			_delay_ms(1000);
		}
		for(i = 0; i < 5;i++)
 230:	81 f7       	brne	.-32     	; 0x212 <main+0x80>
		{

			printm("74\n");
			_delay_ms(1000);
		}
		if (rf_interrupt) {
 232:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <rf_interrupt>
 236:	88 23       	and	r24, r24
 238:	51 f0       	breq	.+20     	; 0x24e <main+0xbc>
			rf_interrupt = false;
 23a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
 23e:	c7 01       	movw	r24, r14
 240:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <nRF24L01_transmit_success>
			if (success != 0)
 244:	89 2b       	or	r24, r25
 246:	19 f0       	breq	.+6      	; 0x24e <main+0xbc>
			nRF24L01_flush_transmit_message(rf);
 248:	c7 01       	movw	r24, r14
 24a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <nRF24L01_flush_transmit_message>
		}

		if (send_message) {
 24e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 252:	88 23       	and	r24, r24
 254:	51 f2       	breq	.-108    	; 0x1ea <main+0x58>
			send_message = false;
 256:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
			nRF24L01Message msg;
			sprintf(outs, "%d" ,  temp);
 25a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <temp>
 25e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <temp+0x1>
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	9f 92       	push	r9
 268:	8f 92       	push	r8
 26a:	df 92       	push	r13
 26c:	cf 92       	push	r12
 26e:	0e 94 ce 04 	call	0x99c	; 0x99c <sprintf>
			memcpy(msg.data, outs, 3);
 272:	f6 01       	movw	r30, r12
 274:	80 81       	ld	r24, Z
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	a2 81       	ldd	r26, Z+2	; 0x02
 27a:	88 87       	std	Y+8, r24	; 0x08
 27c:	99 87       	std	Y+9, r25	; 0x09
 27e:	aa 87       	std	Y+10, r26	; 0x0a
			msg.length = strlen((char *)msg.data) + 1;
 280:	f5 01       	movw	r30, r10
 282:	01 90       	ld	r0, Z+
 284:	00 20       	and	r0, r0
 286:	e9 f7       	brne	.-6      	; 0x282 <main+0xf0>
 288:	ea 19       	sub	r30, r10
 28a:	e8 a7       	std	Y+40, r30	; 0x28
			nRF24L01_transmit(rf, to_address, &msg);
 28c:	ae 01       	movw	r20, r28
 28e:	4a 5f       	subi	r20, 0xFA	; 250
 290:	5f 4f       	sbci	r21, 0xFF	; 255
 292:	be 01       	movw	r22, r28
 294:	6f 5f       	subi	r22, 0xFF	; 255
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	c7 01       	movw	r24, r14
 29a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <nRF24L01_transmit>
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	9f cf       	rjmp	.-194    	; 0x1ea <main+0x58>

000002ac <__vector_11>:
	OCR1A = 15624;
	TCCR1B |= _BV(CS10) | _BV(CS11);
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	8f 93       	push	r24
	send_message = true;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
}
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
	rf_interrupt = true;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <rf_interrupt>
}
 2dc:	8f 91       	pop	r24
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 2e8:	fc 01       	movw	r30, r24
 2ea:	a6 2f       	mov	r26, r22
 2ec:	b7 2f       	mov	r27, r23
 2ee:	9c 01       	movw	r18, r24
 2f0:	2b 5f       	subi	r18, 0xFB	; 251
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	91 91       	ld	r25, Z+
 2f6:	9d 93       	st	X+, r25
 2f8:	e2 17       	cp	r30, r18
 2fa:	f3 07       	cpc	r31, r19
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <copy_address+0xc>
 2fe:	08 95       	ret

00000300 <nRF24L01_init>:
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 ad 03 	call	0x75a	; 0x75a <malloc>
 308:	20 e1       	ldi	r18, 0x10	; 16
 30a:	fc 01       	movw	r30, r24
 30c:	11 92       	st	Z+, r1
 30e:	2a 95       	dec	r18
 310:	e9 f7       	brne	.-6      	; 0x30c <nRF24L01_init+0xc>
 312:	08 95       	ret

00000314 <nRF24L01_send_command>:
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
 31a:	da 01       	movw	r26, r20
 31c:	e8 81       	ld	r30, Y
 31e:	f9 81       	ldd	r31, Y+1	; 0x01
 320:	50 81       	ld	r21, Z
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0a 80       	ldd	r0, Y+2	; 0x02
 328:	02 c0       	rjmp	.+4      	; 0x32e <nRF24L01_send_command+0x1a>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <nRF24L01_send_command+0x16>
 332:	80 95       	com	r24
 334:	85 23       	and	r24, r21
 336:	80 83       	st	Z, r24
 338:	6e bd       	out	0x2e, r22	; 46
 33a:	0d b4       	in	r0, 0x2d	; 45
 33c:	07 fe       	sbrs	r0, 7
 33e:	fd cf       	rjmp	.-6      	; 0x33a <nRF24L01_send_command+0x26>
 340:	8e b5       	in	r24, 0x2e	; 46
 342:	8f 87       	std	Y+15, r24	; 0x0f
 344:	21 15       	cp	r18, r1
 346:	31 05       	cpc	r19, r1
 348:	79 f0       	breq	.+30     	; 0x368 <nRF24L01_send_command+0x54>
 34a:	fd 01       	movw	r30, r26
 34c:	2a 0f       	add	r18, r26
 34e:	3b 1f       	adc	r19, r27
 350:	df 01       	movw	r26, r30
 352:	90 81       	ld	r25, Z
 354:	9e bd       	out	0x2e, r25	; 46
 356:	0d b4       	in	r0, 0x2d	; 45
 358:	07 fe       	sbrs	r0, 7
 35a:	fd cf       	rjmp	.-6      	; 0x356 <nRF24L01_send_command+0x42>
 35c:	9e b5       	in	r25, 0x2e	; 46
 35e:	9c 93       	st	X, r25
 360:	31 96       	adiw	r30, 0x01	; 1
 362:	e2 17       	cp	r30, r18
 364:	f3 07       	cpc	r31, r19
 366:	a1 f7       	brne	.-24     	; 0x350 <nRF24L01_send_command+0x3c>
 368:	e8 81       	ld	r30, Y
 36a:	f9 81       	ldd	r31, Y+1	; 0x01
 36c:	20 81       	ld	r18, Z
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0a 80       	ldd	r0, Y+2	; 0x02
 374:	02 c0       	rjmp	.+4      	; 0x37a <nRF24L01_send_command+0x66>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <nRF24L01_send_command+0x62>
 37e:	82 2b       	or	r24, r18
 380:	80 83       	st	Z, r24
 382:	8f 85       	ldd	r24, Y+15	; 0x0f
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <nRF24L01_write_register>:
 38a:	60 62       	ori	r22, 0x20	; 32
 38c:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
 390:	08 95       	ret

00000392 <nRF24L01_read_register>:
 392:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
 396:	08 95       	ret

00000398 <nRF24L01_no_op>:
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	6f ef       	ldi	r22, 0xFF	; 255
 3a2:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
 3a6:	08 95       	ret

000003a8 <nRF24L01_update_status>:
 3a8:	0e 94 cc 01 	call	0x398	; 0x398 <nRF24L01_no_op>
 3ac:	08 95       	ret

000003ae <nRF24L01_flush_transmit_message>:
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	61 ee       	ldi	r22, 0xE1	; 225
 3b8:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
 3bc:	08 95       	ret

000003be <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	1f 92       	push	r1
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 3c8:	20 e7       	ldi	r18, 0x70	; 112
 3ca:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	ae 01       	movw	r20, r28
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	67 e0       	ldi	r22, 0x07	; 7
 3d8:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
}
 3dc:	0f 90       	pop	r0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	1f 92       	push	r1
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 3f6:	dc 01       	movw	r26, r24
 3f8:	ed 91       	ld	r30, X+
 3fa:	fc 91       	ld	r31, X
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	42 91       	ld	r20, -Z
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	9c 01       	movw	r18, r24
 406:	12 96       	adiw	r26, 0x02	; 2
 408:	0c 90       	ld	r0, X
 40a:	12 97       	sbiw	r26, 0x02	; 2
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	24 2b       	or	r18, r20
 418:	20 83       	st	Z, r18
 41a:	13 96       	adiw	r26, 0x03	; 3
 41c:	ed 91       	ld	r30, X+
 41e:	fc 91       	ld	r31, X
 420:	14 97       	sbiw	r26, 0x04	; 4
 422:	42 91       	ld	r20, -Z
 424:	9c 01       	movw	r18, r24
 426:	15 96       	adiw	r26, 0x05	; 5
 428:	0c 90       	ld	r0, X
 42a:	15 97       	sbiw	r26, 0x05	; 5
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	24 2b       	or	r18, r20
 438:	20 83       	st	Z, r18
 43a:	ed 91       	ld	r30, X+
 43c:	fc 91       	ld	r31, X
 43e:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 440:	40 81       	ld	r20, Z
 442:	9c 01       	movw	r18, r24
 444:	12 96       	adiw	r26, 0x02	; 2
 446:	0c 90       	ld	r0, X
 448:	12 97       	sbiw	r26, 0x02	; 2
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	24 2b       	or	r18, r20
 456:	20 83       	st	Z, r18
 458:	13 96       	adiw	r26, 0x03	; 3
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 460:	30 81       	ld	r19, Z
 462:	ac 01       	movw	r20, r24
 464:	15 96       	adiw	r26, 0x05	; 5
 466:	0c 90       	ld	r0, X
 468:	15 97       	sbiw	r26, 0x05	; 5
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	44 0f       	add	r20, r20
 46e:	55 1f       	adc	r21, r21
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	24 2f       	mov	r18, r20
 476:	20 95       	com	r18
 478:	23 23       	and	r18, r19
 47a:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 47c:	2c b5       	in	r18, 0x2c	; 44
 47e:	20 61       	ori	r18, 0x10	; 16
 480:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 482:	2c b5       	in	r18, 0x2c	; 44
 484:	20 64       	ori	r18, 0x40	; 64
 486:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 488:	16 96       	adiw	r26, 0x06	; 6
 48a:	ed 91       	ld	r30, X+
 48c:	fc 91       	ld	r31, X
 48e:	17 97       	sbiw	r26, 0x07	; 7
 490:	42 91       	ld	r20, -Z
 492:	9c 01       	movw	r18, r24
 494:	18 96       	adiw	r26, 0x08	; 8
 496:	0c 90       	ld	r0, X
 498:	18 97       	sbiw	r26, 0x08	; 8
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	24 2b       	or	r18, r20
 4a6:	20 83       	st	Z, r18
 4a8:	19 96       	adiw	r26, 0x09	; 9
 4aa:	ed 91       	ld	r30, X+
 4ac:	fc 91       	ld	r31, X
 4ae:	1a 97       	sbiw	r26, 0x0a	; 10
 4b0:	42 91       	ld	r20, -Z
 4b2:	9c 01       	movw	r18, r24
 4b4:	1b 96       	adiw	r26, 0x0b	; 11
 4b6:	0c 90       	ld	r0, X
 4b8:	1b 97       	sbiw	r26, 0x0b	; 11
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c4:	24 2b       	or	r18, r20
 4c6:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 4c8:	1c 96       	adiw	r26, 0x0c	; 12
 4ca:	ed 91       	ld	r30, X+
 4cc:	fc 91       	ld	r31, X
 4ce:	1d 97       	sbiw	r26, 0x0d	; 13
 4d0:	22 91       	ld	r18, -Z
 4d2:	1e 96       	adiw	r26, 0x0e	; 14
 4d4:	0c 90       	ld	r0, X
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 4e6:	8c b5       	in	r24, 0x2c	; 44
 4e8:	87 7f       	andi	r24, 0xF7	; 247
 4ea:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 4ec:	8c b5       	in	r24, 0x2c	; 44
 4ee:	8b 7f       	andi	r24, 0xFB	; 251
 4f0:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 4f2:	8c b5       	in	r24, 0x2c	; 44
 4f4:	8e 7f       	andi	r24, 0xFE	; 254
 4f6:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 4f8:	8c b5       	in	r24, 0x2c	; 44
 4fa:	8d 7f       	andi	r24, 0xFD	; 253
 4fc:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 4fe:	8d b5       	in	r24, 0x2d	; 45
 500:	81 60       	ori	r24, 0x01	; 1
 502:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 504:	8c b5       	in	r24, 0x2c	; 44
 506:	8f 7d       	andi	r24, 0xDF	; 223
 508:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	62 ee       	ldi	r22, 0xE2	; 226
 514:	c8 01       	movw	r24, r16
 516:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	61 ee       	ldi	r22, 0xE1	; 225
 524:	c8 01       	movw	r24, r16
 526:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 52a:	c8 01       	movw	r24, r16
 52c:	0e 94 df 01 	call	0x3be	; 0x3be <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 530:	8f e0       	ldi	r24, 0x0F	; 15
 532:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	ae 01       	movw	r20, r28
 53a:	4f 5f       	subi	r20, 0xFF	; 255
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	c8 01       	movw	r24, r16
 542:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 546:	0f 2e       	mov	r0, r31
 548:	ff e3       	ldi	r31, 0x3F	; 63
 54a:	ff 2e       	mov	r15, r31
 54c:	f0 2d       	mov	r31, r0
 54e:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	ae 01       	movw	r20, r28
 556:	4f 5f       	subi	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	c8 01       	movw	r24, r16
 55e:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 562:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	ae 01       	movw	r20, r28
 56a:	4f 5f       	subi	r20, 0xFF	; 255
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	6c e1       	ldi	r22, 0x1C	; 28
 570:	c8 01       	movw	r24, r16
 572:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	ae 01       	movw	r20, r28
 580:	4f 5f       	subi	r20, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	6d e1       	ldi	r22, 0x1D	; 29
 586:	c8 01       	movw	r24, r16
 588:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
 58c:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	ae 01       	movw	r20, r28
 594:	4f 5f       	subi	r20, 0xFF	; 255
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	62 e0       	ldi	r22, 0x02	; 2
 59a:	c8 01       	movw	r24, r16
 59c:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
}
 5a0:	0f 90       	pop	r0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	08 95       	ret

000005ae <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	1f 92       	push	r1
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
 5b8:	20 e3       	ldi	r18, 0x30	; 48
 5ba:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	ae 01       	movw	r20, r28
 5c2:	4f 5f       	subi	r20, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	67 e0       	ldi	r22, 0x07	; 7
 5c8:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
}
 5cc:	0f 90       	pop	r0
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
 5d4:	cf 92       	push	r12
 5d6:	df 92       	push	r13
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <nRF24L01_transmit+0x12>
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <nRF24L01_transmit+0x14>
 5e8:	00 d0       	rcall	.+0      	; 0x5ea <nRF24L01_transmit+0x16>
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	8c 01       	movw	r16, r24
 5f0:	6b 01       	movw	r12, r22
 5f2:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
 5f4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
 5f8:	be 01       	movw	r22, r28
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	c6 01       	movw	r24, r12
 600:	0e 94 74 01 	call	0x2e8	; 0x2e8 <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
 604:	25 e0       	ldi	r18, 0x05	; 5
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	ae 01       	movw	r20, r28
 60a:	4f 5f       	subi	r20, 0xFF	; 255
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	60 e1       	ldi	r22, 0x10	; 16
 610:	c8 01       	movw	r24, r16
 612:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
 616:	be 01       	movw	r22, r28
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	c6 01       	movw	r24, r12
 61e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
 622:	25 e0       	ldi	r18, 0x05	; 5
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	ae 01       	movw	r20, r28
 628:	4f 5f       	subi	r20, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	6a e0       	ldi	r22, 0x0A	; 10
 62e:	c8 01       	movw	r24, r16
 630:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
 634:	d7 01       	movw	r26, r14
 636:	92 96       	adiw	r26, 0x22	; 34
 638:	2c 91       	ld	r18, X
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	a7 01       	movw	r20, r14
 63e:	4e 5f       	subi	r20, 0xFE	; 254
 640:	5f 4f       	sbci	r21, 0xFF	; 255
 642:	60 ea       	ldi	r22, 0xA0	; 160
 644:	c8 01       	movw	r24, r16
 646:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	ae 01       	movw	r20, r28
 650:	4a 5f       	subi	r20, 0xFA	; 250
 652:	5f 4f       	sbci	r21, 0xFF	; 255
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	c8 01       	movw	r24, r16
 658:	0e 94 c9 01 	call	0x392	; 0x392 <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
 65c:	8e 81       	ldd	r24, Y+6	; 0x06
 65e:	8e 7f       	andi	r24, 0xFE	; 254
 660:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	ae 01       	movw	r20, r28
 668:	4a 5f       	subi	r20, 0xFA	; 250
 66a:	5f 4f       	sbci	r21, 0xFF	; 255
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	c8 01       	movw	r24, r16
 670:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
 674:	d8 01       	movw	r26, r16
 676:	13 96       	adiw	r26, 0x03	; 3
 678:	ed 91       	ld	r30, X+
 67a:	fc 91       	ld	r31, X
 67c:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 67e:	20 81       	ld	r18, Z
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	15 96       	adiw	r26, 0x05	; 5
 686:	0c 90       	ld	r0, X
 688:	02 c0       	rjmp	.+4      	; 0x68e <nRF24L01_transmit+0xba>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	0a 94       	dec	r0
 690:	e2 f7       	brpl	.-8      	; 0x68a <nRF24L01_transmit+0xb6>
 692:	82 2b       	or	r24, r18
 694:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 696:	26 96       	adiw	r28, 0x06	; 6
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	08 95       	ret

000006b4 <nRF24L01_transmit_success>:

int nRF24L01_transmit_success(nRF24L01 *rf) {
 6b4:	ef 92       	push	r14
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	1f 92       	push	r1
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	8c 01       	movw	r16, r24
 6c8:	dc 01       	movw	r26, r24
 6ca:	13 96       	adiw	r26, 0x03	; 3
 6cc:	ed 91       	ld	r30, X+
 6ce:	fc 91       	ld	r31, X
 6d0:	14 97       	sbiw	r26, 0x04	; 4
inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 6d2:	20 81       	ld	r18, Z
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	15 96       	adiw	r26, 0x05	; 5
 6da:	0c 90       	ld	r0, X
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <nRF24L01_transmit_success+0x2e>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	0a 94       	dec	r0
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <nRF24L01_transmit_success+0x2a>
 6e6:	80 95       	com	r24
 6e8:	82 23       	and	r24, r18
 6ea:	80 83       	st	Z, r24
    set_high(rf->ce);
}

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
 6ec:	c8 01       	movw	r24, r16
 6ee:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <nRF24L01_update_status>
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 6f2:	f8 01       	movw	r30, r16
 6f4:	87 85       	ldd	r24, Z+15	; 0x0f
 6f6:	85 fd       	sbrc	r24, 5
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <nRF24L01_transmit_success+0x58>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 6fa:	84 fd       	sbrc	r24, 4
 6fc:	0a c0       	rjmp	.+20     	; 0x712 <nRF24L01_transmit_success+0x5e>
    else success = -2;
 6fe:	0f 2e       	mov	r0, r31
 700:	fe ef       	ldi	r31, 0xFE	; 254
 702:	ef 2e       	mov	r14, r31
 704:	ff 24       	eor	r15, r15
 706:	fa 94       	dec	r15
 708:	f0 2d       	mov	r31, r0
 70a:	06 c0       	rjmp	.+12     	; 0x718 <nRF24L01_transmit_success+0x64>

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 70c:	e1 2c       	mov	r14, r1
 70e:	f1 2c       	mov	r15, r1
 710:	03 c0       	rjmp	.+6      	; 0x718 <nRF24L01_transmit_success+0x64>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 712:	ee 24       	eor	r14, r14
 714:	ea 94       	dec	r14
 716:	fe 2c       	mov	r15, r14
    else success = -2;
    nRF24L01_clear_transmit_interrupts(rf);
 718:	c8 01       	movw	r24, r16
 71a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <nRF24L01_clear_transmit_interrupts>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	ae 01       	movw	r20, r28
 724:	4f 5f       	subi	r20, 0xFF	; 255
 726:	5f 4f       	sbci	r21, 0xFF	; 255
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	c8 01       	movw	r24, r16
 72c:	0e 94 c9 01 	call	0x392	; 0x392 <nRF24L01_read_register>
    config |= _BV(PRIM_RX);
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	81 60       	ori	r24, 0x01	; 1
 734:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	ae 01       	movw	r20, r28
 73c:	4f 5f       	subi	r20, 0xFF	; 255
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	c8 01       	movw	r24, r16
 744:	0e 94 c5 01 	call	0x38a	; 0x38a <nRF24L01_write_register>
    return success;
}
 748:	c7 01       	movw	r24, r14
 74a:	0f 90       	pop	r0
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	ff 90       	pop	r15
 756:	ef 90       	pop	r14
 758:	08 95       	ret

0000075a <malloc>:
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	91 05       	cpc	r25, r1
 766:	10 f4       	brcc	.+4      	; 0x76c <malloc+0x12>
 768:	82 e0       	ldi	r24, 0x02	; 2
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <__flp>
 770:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <__flp+0x1>
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	a0 e0       	ldi	r26, 0x00	; 0
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	30 97       	sbiw	r30, 0x00	; 0
 77e:	19 f1       	breq	.+70     	; 0x7c6 <malloc+0x6c>
 780:	40 81       	ld	r20, Z
 782:	51 81       	ldd	r21, Z+1	; 0x01
 784:	02 81       	ldd	r16, Z+2	; 0x02
 786:	13 81       	ldd	r17, Z+3	; 0x03
 788:	48 17       	cp	r20, r24
 78a:	59 07       	cpc	r21, r25
 78c:	c8 f0       	brcs	.+50     	; 0x7c0 <malloc+0x66>
 78e:	84 17       	cp	r24, r20
 790:	95 07       	cpc	r25, r21
 792:	69 f4       	brne	.+26     	; 0x7ae <malloc+0x54>
 794:	10 97       	sbiw	r26, 0x00	; 0
 796:	31 f0       	breq	.+12     	; 0x7a4 <malloc+0x4a>
 798:	12 96       	adiw	r26, 0x02	; 2
 79a:	0c 93       	st	X, r16
 79c:	12 97       	sbiw	r26, 0x02	; 2
 79e:	13 96       	adiw	r26, 0x03	; 3
 7a0:	1c 93       	st	X, r17
 7a2:	27 c0       	rjmp	.+78     	; 0x7f2 <malloc+0x98>
 7a4:	00 93 23 01 	sts	0x0123, r16	; 0x800123 <__flp>
 7a8:	10 93 24 01 	sts	0x0124, r17	; 0x800124 <__flp+0x1>
 7ac:	22 c0       	rjmp	.+68     	; 0x7f2 <malloc+0x98>
 7ae:	21 15       	cp	r18, r1
 7b0:	31 05       	cpc	r19, r1
 7b2:	19 f0       	breq	.+6      	; 0x7ba <malloc+0x60>
 7b4:	42 17       	cp	r20, r18
 7b6:	53 07       	cpc	r21, r19
 7b8:	18 f4       	brcc	.+6      	; 0x7c0 <malloc+0x66>
 7ba:	9a 01       	movw	r18, r20
 7bc:	bd 01       	movw	r22, r26
 7be:	ef 01       	movw	r28, r30
 7c0:	df 01       	movw	r26, r30
 7c2:	f8 01       	movw	r30, r16
 7c4:	db cf       	rjmp	.-74     	; 0x77c <malloc+0x22>
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	f9 f0       	breq	.+62     	; 0x80a <malloc+0xb0>
 7cc:	28 1b       	sub	r18, r24
 7ce:	39 0b       	sbc	r19, r25
 7d0:	24 30       	cpi	r18, 0x04	; 4
 7d2:	31 05       	cpc	r19, r1
 7d4:	80 f4       	brcc	.+32     	; 0x7f6 <malloc+0x9c>
 7d6:	8a 81       	ldd	r24, Y+2	; 0x02
 7d8:	9b 81       	ldd	r25, Y+3	; 0x03
 7da:	61 15       	cp	r22, r1
 7dc:	71 05       	cpc	r23, r1
 7de:	21 f0       	breq	.+8      	; 0x7e8 <malloc+0x8e>
 7e0:	fb 01       	movw	r30, r22
 7e2:	93 83       	std	Z+3, r25	; 0x03
 7e4:	82 83       	std	Z+2, r24	; 0x02
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <malloc+0x96>
 7e8:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__flp+0x1>
 7ec:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__flp>
 7f0:	fe 01       	movw	r30, r28
 7f2:	32 96       	adiw	r30, 0x02	; 2
 7f4:	44 c0       	rjmp	.+136    	; 0x87e <malloc+0x124>
 7f6:	fe 01       	movw	r30, r28
 7f8:	e2 0f       	add	r30, r18
 7fa:	f3 1f       	adc	r31, r19
 7fc:	81 93       	st	Z+, r24
 7fe:	91 93       	st	Z+, r25
 800:	22 50       	subi	r18, 0x02	; 2
 802:	31 09       	sbc	r19, r1
 804:	39 83       	std	Y+1, r19	; 0x01
 806:	28 83       	st	Y, r18
 808:	3a c0       	rjmp	.+116    	; 0x87e <malloc+0x124>
 80a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 80e:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 812:	23 2b       	or	r18, r19
 814:	41 f4       	brne	.+16     	; 0x826 <malloc+0xcc>
 816:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 81a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 81e:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <__brkval+0x1>
 822:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__brkval>
 826:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 82a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 82e:	21 15       	cp	r18, r1
 830:	31 05       	cpc	r19, r1
 832:	41 f4       	brne	.+16     	; 0x844 <malloc+0xea>
 834:	2d b7       	in	r18, 0x3d	; 61
 836:	3e b7       	in	r19, 0x3e	; 62
 838:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 83c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 840:	24 1b       	sub	r18, r20
 842:	35 0b       	sbc	r19, r21
 844:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <__brkval>
 848:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <__brkval+0x1>
 84c:	e2 17       	cp	r30, r18
 84e:	f3 07       	cpc	r31, r19
 850:	a0 f4       	brcc	.+40     	; 0x87a <malloc+0x120>
 852:	2e 1b       	sub	r18, r30
 854:	3f 0b       	sbc	r19, r31
 856:	28 17       	cp	r18, r24
 858:	39 07       	cpc	r19, r25
 85a:	78 f0       	brcs	.+30     	; 0x87a <malloc+0x120>
 85c:	ac 01       	movw	r20, r24
 85e:	4e 5f       	subi	r20, 0xFE	; 254
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	24 17       	cp	r18, r20
 864:	35 07       	cpc	r19, r21
 866:	48 f0       	brcs	.+18     	; 0x87a <malloc+0x120>
 868:	4e 0f       	add	r20, r30
 86a:	5f 1f       	adc	r21, r31
 86c:	50 93 22 01 	sts	0x0122, r21	; 0x800122 <__brkval+0x1>
 870:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <__brkval>
 874:	81 93       	st	Z+, r24
 876:	91 93       	st	Z+, r25
 878:	02 c0       	rjmp	.+4      	; 0x87e <malloc+0x124>
 87a:	e0 e0       	ldi	r30, 0x00	; 0
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	cf 01       	movw	r24, r30
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	08 95       	ret

0000088a <free>:
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	09 f4       	brne	.+2      	; 0x894 <free+0xa>
 892:	81 c0       	rjmp	.+258    	; 0x996 <__stack+0x97>
 894:	fc 01       	movw	r30, r24
 896:	32 97       	sbiw	r30, 0x02	; 2
 898:	13 82       	std	Z+3, r1	; 0x03
 89a:	12 82       	std	Z+2, r1	; 0x02
 89c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <__flp>
 8a0:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <__flp+0x1>
 8a4:	10 97       	sbiw	r26, 0x00	; 0
 8a6:	81 f4       	brne	.+32     	; 0x8c8 <free+0x3e>
 8a8:	20 81       	ld	r18, Z
 8aa:	31 81       	ldd	r19, Z+1	; 0x01
 8ac:	82 0f       	add	r24, r18
 8ae:	93 1f       	adc	r25, r19
 8b0:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 8b4:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 8b8:	28 17       	cp	r18, r24
 8ba:	39 07       	cpc	r19, r25
 8bc:	51 f5       	brne	.+84     	; 0x912 <__stack+0x13>
 8be:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <__brkval+0x1>
 8c2:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <__brkval>
 8c6:	67 c0       	rjmp	.+206    	; 0x996 <__stack+0x97>
 8c8:	ed 01       	movw	r28, r26
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	ce 17       	cp	r28, r30
 8d0:	df 07       	cpc	r29, r31
 8d2:	40 f4       	brcc	.+16     	; 0x8e4 <free+0x5a>
 8d4:	4a 81       	ldd	r20, Y+2	; 0x02
 8d6:	5b 81       	ldd	r21, Y+3	; 0x03
 8d8:	9e 01       	movw	r18, r28
 8da:	41 15       	cp	r20, r1
 8dc:	51 05       	cpc	r21, r1
 8de:	f1 f0       	breq	.+60     	; 0x91c <__stack+0x1d>
 8e0:	ea 01       	movw	r28, r20
 8e2:	f5 cf       	rjmp	.-22     	; 0x8ce <free+0x44>
 8e4:	d3 83       	std	Z+3, r29	; 0x03
 8e6:	c2 83       	std	Z+2, r28	; 0x02
 8e8:	40 81       	ld	r20, Z
 8ea:	51 81       	ldd	r21, Z+1	; 0x01
 8ec:	84 0f       	add	r24, r20
 8ee:	95 1f       	adc	r25, r21
 8f0:	c8 17       	cp	r28, r24
 8f2:	d9 07       	cpc	r29, r25
 8f4:	59 f4       	brne	.+22     	; 0x90c <__stack+0xd>
 8f6:	88 81       	ld	r24, Y
 8f8:	99 81       	ldd	r25, Y+1	; 0x01
 8fa:	84 0f       	add	r24, r20
 8fc:	95 1f       	adc	r25, r21
 8fe:	02 96       	adiw	r24, 0x02	; 2
 900:	91 83       	std	Z+1, r25	; 0x01
 902:	80 83       	st	Z, r24
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	9b 81       	ldd	r25, Y+3	; 0x03
 908:	93 83       	std	Z+3, r25	; 0x03
 90a:	82 83       	std	Z+2, r24	; 0x02
 90c:	21 15       	cp	r18, r1
 90e:	31 05       	cpc	r19, r1
 910:	29 f4       	brne	.+10     	; 0x91c <__stack+0x1d>
 912:	f0 93 24 01 	sts	0x0124, r31	; 0x800124 <__flp+0x1>
 916:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <__flp>
 91a:	3d c0       	rjmp	.+122    	; 0x996 <__stack+0x97>
 91c:	e9 01       	movw	r28, r18
 91e:	fb 83       	std	Y+3, r31	; 0x03
 920:	ea 83       	std	Y+2, r30	; 0x02
 922:	49 91       	ld	r20, Y+
 924:	59 91       	ld	r21, Y+
 926:	c4 0f       	add	r28, r20
 928:	d5 1f       	adc	r29, r21
 92a:	ec 17       	cp	r30, r28
 92c:	fd 07       	cpc	r31, r29
 92e:	61 f4       	brne	.+24     	; 0x948 <__stack+0x49>
 930:	80 81       	ld	r24, Z
 932:	91 81       	ldd	r25, Z+1	; 0x01
 934:	84 0f       	add	r24, r20
 936:	95 1f       	adc	r25, r21
 938:	02 96       	adiw	r24, 0x02	; 2
 93a:	e9 01       	movw	r28, r18
 93c:	99 83       	std	Y+1, r25	; 0x01
 93e:	88 83       	st	Y, r24
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	9b 83       	std	Y+3, r25	; 0x03
 946:	8a 83       	std	Y+2, r24	; 0x02
 948:	e0 e0       	ldi	r30, 0x00	; 0
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	12 96       	adiw	r26, 0x02	; 2
 94e:	8d 91       	ld	r24, X+
 950:	9c 91       	ld	r25, X
 952:	13 97       	sbiw	r26, 0x03	; 3
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	19 f0       	breq	.+6      	; 0x95e <__stack+0x5f>
 958:	fd 01       	movw	r30, r26
 95a:	dc 01       	movw	r26, r24
 95c:	f7 cf       	rjmp	.-18     	; 0x94c <__stack+0x4d>
 95e:	8d 91       	ld	r24, X+
 960:	9c 91       	ld	r25, X
 962:	11 97       	sbiw	r26, 0x01	; 1
 964:	9d 01       	movw	r18, r26
 966:	2e 5f       	subi	r18, 0xFE	; 254
 968:	3f 4f       	sbci	r19, 0xFF	; 255
 96a:	82 0f       	add	r24, r18
 96c:	93 1f       	adc	r25, r19
 96e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 972:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 976:	28 17       	cp	r18, r24
 978:	39 07       	cpc	r19, r25
 97a:	69 f4       	brne	.+26     	; 0x996 <__stack+0x97>
 97c:	30 97       	sbiw	r30, 0x00	; 0
 97e:	29 f4       	brne	.+10     	; 0x98a <__stack+0x8b>
 980:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__flp+0x1>
 984:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__flp>
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	13 82       	std	Z+3, r1	; 0x03
 98c:	12 82       	std	Z+2, r1	; 0x02
 98e:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <__brkval+0x1>
 992:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <__brkval>
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	08 95       	ret

0000099c <sprintf>:
 99c:	ae e0       	ldi	r26, 0x0E	; 14
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e4 ed       	ldi	r30, 0xD4	; 212
 9a2:	f4 e0       	ldi	r31, 0x04	; 4
 9a4:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__prologue_saves__+0x1c>
 9a8:	0d 89       	ldd	r16, Y+21	; 0x15
 9aa:	1e 89       	ldd	r17, Y+22	; 0x16
 9ac:	86 e0       	ldi	r24, 0x06	; 6
 9ae:	8c 83       	std	Y+4, r24	; 0x04
 9b0:	1a 83       	std	Y+2, r17	; 0x02
 9b2:	09 83       	std	Y+1, r16	; 0x01
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f e7       	ldi	r25, 0x7F	; 127
 9b8:	9e 83       	std	Y+6, r25	; 0x06
 9ba:	8d 83       	std	Y+5, r24	; 0x05
 9bc:	ae 01       	movw	r20, r28
 9be:	47 5e       	subi	r20, 0xE7	; 231
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255
 9c2:	6f 89       	ldd	r22, Y+23	; 0x17
 9c4:	78 8d       	ldd	r23, Y+24	; 0x18
 9c6:	ce 01       	movw	r24, r28
 9c8:	01 96       	adiw	r24, 0x01	; 1
 9ca:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vfprintf>
 9ce:	ef 81       	ldd	r30, Y+7	; 0x07
 9d0:	f8 85       	ldd	r31, Y+8	; 0x08
 9d2:	e0 0f       	add	r30, r16
 9d4:	f1 1f       	adc	r31, r17
 9d6:	10 82       	st	Z, r1
 9d8:	2e 96       	adiw	r28, 0x0e	; 14
 9da:	e4 e0       	ldi	r30, 0x04	; 4
 9dc:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__epilogue_restores__+0x1c>

000009e0 <vfprintf>:
 9e0:	ab e0       	ldi	r26, 0x0B	; 11
 9e2:	b0 e0       	ldi	r27, 0x00	; 0
 9e4:	e6 ef       	ldi	r30, 0xF6	; 246
 9e6:	f4 e0       	ldi	r31, 0x04	; 4
 9e8:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__prologue_saves__>
 9ec:	6c 01       	movw	r12, r24
 9ee:	7b 01       	movw	r14, r22
 9f0:	8a 01       	movw	r16, r20
 9f2:	fc 01       	movw	r30, r24
 9f4:	17 82       	std	Z+7, r1	; 0x07
 9f6:	16 82       	std	Z+6, r1	; 0x06
 9f8:	83 81       	ldd	r24, Z+3	; 0x03
 9fa:	81 ff       	sbrs	r24, 1
 9fc:	cc c1       	rjmp	.+920    	; 0xd96 <vfprintf+0x3b6>
 9fe:	ce 01       	movw	r24, r28
 a00:	01 96       	adiw	r24, 0x01	; 1
 a02:	3c 01       	movw	r6, r24
 a04:	f6 01       	movw	r30, r12
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	f7 01       	movw	r30, r14
 a0a:	93 fd       	sbrc	r25, 3
 a0c:	85 91       	lpm	r24, Z+
 a0e:	93 ff       	sbrs	r25, 3
 a10:	81 91       	ld	r24, Z+
 a12:	7f 01       	movw	r14, r30
 a14:	88 23       	and	r24, r24
 a16:	09 f4       	brne	.+2      	; 0xa1a <vfprintf+0x3a>
 a18:	ba c1       	rjmp	.+884    	; 0xd8e <vfprintf+0x3ae>
 a1a:	85 32       	cpi	r24, 0x25	; 37
 a1c:	39 f4       	brne	.+14     	; 0xa2c <vfprintf+0x4c>
 a1e:	93 fd       	sbrc	r25, 3
 a20:	85 91       	lpm	r24, Z+
 a22:	93 ff       	sbrs	r25, 3
 a24:	81 91       	ld	r24, Z+
 a26:	7f 01       	movw	r14, r30
 a28:	85 32       	cpi	r24, 0x25	; 37
 a2a:	29 f4       	brne	.+10     	; 0xa36 <vfprintf+0x56>
 a2c:	b6 01       	movw	r22, r12
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 a34:	e7 cf       	rjmp	.-50     	; 0xa04 <vfprintf+0x24>
 a36:	91 2c       	mov	r9, r1
 a38:	21 2c       	mov	r2, r1
 a3a:	31 2c       	mov	r3, r1
 a3c:	ff e1       	ldi	r31, 0x1F	; 31
 a3e:	f3 15       	cp	r31, r3
 a40:	d8 f0       	brcs	.+54     	; 0xa78 <vfprintf+0x98>
 a42:	8b 32       	cpi	r24, 0x2B	; 43
 a44:	79 f0       	breq	.+30     	; 0xa64 <vfprintf+0x84>
 a46:	38 f4       	brcc	.+14     	; 0xa56 <vfprintf+0x76>
 a48:	80 32       	cpi	r24, 0x20	; 32
 a4a:	79 f0       	breq	.+30     	; 0xa6a <vfprintf+0x8a>
 a4c:	83 32       	cpi	r24, 0x23	; 35
 a4e:	a1 f4       	brne	.+40     	; 0xa78 <vfprintf+0x98>
 a50:	23 2d       	mov	r18, r3
 a52:	20 61       	ori	r18, 0x10	; 16
 a54:	1d c0       	rjmp	.+58     	; 0xa90 <vfprintf+0xb0>
 a56:	8d 32       	cpi	r24, 0x2D	; 45
 a58:	61 f0       	breq	.+24     	; 0xa72 <vfprintf+0x92>
 a5a:	80 33       	cpi	r24, 0x30	; 48
 a5c:	69 f4       	brne	.+26     	; 0xa78 <vfprintf+0x98>
 a5e:	23 2d       	mov	r18, r3
 a60:	21 60       	ori	r18, 0x01	; 1
 a62:	16 c0       	rjmp	.+44     	; 0xa90 <vfprintf+0xb0>
 a64:	83 2d       	mov	r24, r3
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	38 2e       	mov	r3, r24
 a6a:	e3 2d       	mov	r30, r3
 a6c:	e4 60       	ori	r30, 0x04	; 4
 a6e:	3e 2e       	mov	r3, r30
 a70:	2a c0       	rjmp	.+84     	; 0xac6 <vfprintf+0xe6>
 a72:	f3 2d       	mov	r31, r3
 a74:	f8 60       	ori	r31, 0x08	; 8
 a76:	1d c0       	rjmp	.+58     	; 0xab2 <vfprintf+0xd2>
 a78:	37 fc       	sbrc	r3, 7
 a7a:	2d c0       	rjmp	.+90     	; 0xad6 <vfprintf+0xf6>
 a7c:	20 ed       	ldi	r18, 0xD0	; 208
 a7e:	28 0f       	add	r18, r24
 a80:	2a 30       	cpi	r18, 0x0A	; 10
 a82:	40 f0       	brcs	.+16     	; 0xa94 <vfprintf+0xb4>
 a84:	8e 32       	cpi	r24, 0x2E	; 46
 a86:	b9 f4       	brne	.+46     	; 0xab6 <vfprintf+0xd6>
 a88:	36 fc       	sbrc	r3, 6
 a8a:	81 c1       	rjmp	.+770    	; 0xd8e <vfprintf+0x3ae>
 a8c:	23 2d       	mov	r18, r3
 a8e:	20 64       	ori	r18, 0x40	; 64
 a90:	32 2e       	mov	r3, r18
 a92:	19 c0       	rjmp	.+50     	; 0xac6 <vfprintf+0xe6>
 a94:	36 fe       	sbrs	r3, 6
 a96:	06 c0       	rjmp	.+12     	; 0xaa4 <vfprintf+0xc4>
 a98:	8a e0       	ldi	r24, 0x0A	; 10
 a9a:	98 9e       	mul	r9, r24
 a9c:	20 0d       	add	r18, r0
 a9e:	11 24       	eor	r1, r1
 aa0:	92 2e       	mov	r9, r18
 aa2:	11 c0       	rjmp	.+34     	; 0xac6 <vfprintf+0xe6>
 aa4:	ea e0       	ldi	r30, 0x0A	; 10
 aa6:	2e 9e       	mul	r2, r30
 aa8:	20 0d       	add	r18, r0
 aaa:	11 24       	eor	r1, r1
 aac:	22 2e       	mov	r2, r18
 aae:	f3 2d       	mov	r31, r3
 ab0:	f0 62       	ori	r31, 0x20	; 32
 ab2:	3f 2e       	mov	r3, r31
 ab4:	08 c0       	rjmp	.+16     	; 0xac6 <vfprintf+0xe6>
 ab6:	8c 36       	cpi	r24, 0x6C	; 108
 ab8:	21 f4       	brne	.+8      	; 0xac2 <vfprintf+0xe2>
 aba:	83 2d       	mov	r24, r3
 abc:	80 68       	ori	r24, 0x80	; 128
 abe:	38 2e       	mov	r3, r24
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0xe6>
 ac2:	88 36       	cpi	r24, 0x68	; 104
 ac4:	41 f4       	brne	.+16     	; 0xad6 <vfprintf+0xf6>
 ac6:	f7 01       	movw	r30, r14
 ac8:	93 fd       	sbrc	r25, 3
 aca:	85 91       	lpm	r24, Z+
 acc:	93 ff       	sbrs	r25, 3
 ace:	81 91       	ld	r24, Z+
 ad0:	7f 01       	movw	r14, r30
 ad2:	81 11       	cpse	r24, r1
 ad4:	b3 cf       	rjmp	.-154    	; 0xa3c <vfprintf+0x5c>
 ad6:	98 2f       	mov	r25, r24
 ad8:	9f 7d       	andi	r25, 0xDF	; 223
 ada:	95 54       	subi	r25, 0x45	; 69
 adc:	93 30       	cpi	r25, 0x03	; 3
 ade:	28 f4       	brcc	.+10     	; 0xaea <vfprintf+0x10a>
 ae0:	0c 5f       	subi	r16, 0xFC	; 252
 ae2:	1f 4f       	sbci	r17, 0xFF	; 255
 ae4:	9f e3       	ldi	r25, 0x3F	; 63
 ae6:	99 83       	std	Y+1, r25	; 0x01
 ae8:	0d c0       	rjmp	.+26     	; 0xb04 <vfprintf+0x124>
 aea:	83 36       	cpi	r24, 0x63	; 99
 aec:	31 f0       	breq	.+12     	; 0xafa <vfprintf+0x11a>
 aee:	83 37       	cpi	r24, 0x73	; 115
 af0:	71 f0       	breq	.+28     	; 0xb0e <vfprintf+0x12e>
 af2:	83 35       	cpi	r24, 0x53	; 83
 af4:	09 f0       	breq	.+2      	; 0xaf8 <vfprintf+0x118>
 af6:	59 c0       	rjmp	.+178    	; 0xbaa <vfprintf+0x1ca>
 af8:	21 c0       	rjmp	.+66     	; 0xb3c <vfprintf+0x15c>
 afa:	f8 01       	movw	r30, r16
 afc:	80 81       	ld	r24, Z
 afe:	89 83       	std	Y+1, r24	; 0x01
 b00:	0e 5f       	subi	r16, 0xFE	; 254
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	88 24       	eor	r8, r8
 b06:	83 94       	inc	r8
 b08:	91 2c       	mov	r9, r1
 b0a:	53 01       	movw	r10, r6
 b0c:	13 c0       	rjmp	.+38     	; 0xb34 <vfprintf+0x154>
 b0e:	28 01       	movw	r4, r16
 b10:	f2 e0       	ldi	r31, 0x02	; 2
 b12:	4f 0e       	add	r4, r31
 b14:	51 1c       	adc	r5, r1
 b16:	f8 01       	movw	r30, r16
 b18:	a0 80       	ld	r10, Z
 b1a:	b1 80       	ldd	r11, Z+1	; 0x01
 b1c:	36 fe       	sbrs	r3, 6
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <vfprintf+0x146>
 b20:	69 2d       	mov	r22, r9
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x14a>
 b26:	6f ef       	ldi	r22, 0xFF	; 255
 b28:	7f ef       	ldi	r23, 0xFF	; 255
 b2a:	c5 01       	movw	r24, r10
 b2c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <strnlen>
 b30:	4c 01       	movw	r8, r24
 b32:	82 01       	movw	r16, r4
 b34:	f3 2d       	mov	r31, r3
 b36:	ff 77       	andi	r31, 0x7F	; 127
 b38:	3f 2e       	mov	r3, r31
 b3a:	16 c0       	rjmp	.+44     	; 0xb68 <vfprintf+0x188>
 b3c:	28 01       	movw	r4, r16
 b3e:	22 e0       	ldi	r18, 0x02	; 2
 b40:	42 0e       	add	r4, r18
 b42:	51 1c       	adc	r5, r1
 b44:	f8 01       	movw	r30, r16
 b46:	a0 80       	ld	r10, Z
 b48:	b1 80       	ldd	r11, Z+1	; 0x01
 b4a:	36 fe       	sbrs	r3, 6
 b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x174>
 b4e:	69 2d       	mov	r22, r9
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x178>
 b54:	6f ef       	ldi	r22, 0xFF	; 255
 b56:	7f ef       	ldi	r23, 0xFF	; 255
 b58:	c5 01       	movw	r24, r10
 b5a:	0e 94 d1 06 	call	0xda2	; 0xda2 <strnlen_P>
 b5e:	4c 01       	movw	r8, r24
 b60:	f3 2d       	mov	r31, r3
 b62:	f0 68       	ori	r31, 0x80	; 128
 b64:	3f 2e       	mov	r3, r31
 b66:	82 01       	movw	r16, r4
 b68:	33 fc       	sbrc	r3, 3
 b6a:	1b c0       	rjmp	.+54     	; 0xba2 <vfprintf+0x1c2>
 b6c:	82 2d       	mov	r24, r2
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	88 16       	cp	r8, r24
 b72:	99 06       	cpc	r9, r25
 b74:	b0 f4       	brcc	.+44     	; 0xba2 <vfprintf+0x1c2>
 b76:	b6 01       	movw	r22, r12
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 b80:	2a 94       	dec	r2
 b82:	f4 cf       	rjmp	.-24     	; 0xb6c <vfprintf+0x18c>
 b84:	f5 01       	movw	r30, r10
 b86:	37 fc       	sbrc	r3, 7
 b88:	85 91       	lpm	r24, Z+
 b8a:	37 fe       	sbrs	r3, 7
 b8c:	81 91       	ld	r24, Z+
 b8e:	5f 01       	movw	r10, r30
 b90:	b6 01       	movw	r22, r12
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 b98:	21 10       	cpse	r2, r1
 b9a:	2a 94       	dec	r2
 b9c:	21 e0       	ldi	r18, 0x01	; 1
 b9e:	82 1a       	sub	r8, r18
 ba0:	91 08       	sbc	r9, r1
 ba2:	81 14       	cp	r8, r1
 ba4:	91 04       	cpc	r9, r1
 ba6:	71 f7       	brne	.-36     	; 0xb84 <vfprintf+0x1a4>
 ba8:	e8 c0       	rjmp	.+464    	; 0xd7a <vfprintf+0x39a>
 baa:	84 36       	cpi	r24, 0x64	; 100
 bac:	11 f0       	breq	.+4      	; 0xbb2 <vfprintf+0x1d2>
 bae:	89 36       	cpi	r24, 0x69	; 105
 bb0:	41 f5       	brne	.+80     	; 0xc02 <vfprintf+0x222>
 bb2:	f8 01       	movw	r30, r16
 bb4:	37 fe       	sbrs	r3, 7
 bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <vfprintf+0x1e6>
 bb8:	60 81       	ld	r22, Z
 bba:	71 81       	ldd	r23, Z+1	; 0x01
 bbc:	82 81       	ldd	r24, Z+2	; 0x02
 bbe:	93 81       	ldd	r25, Z+3	; 0x03
 bc0:	0c 5f       	subi	r16, 0xFC	; 252
 bc2:	1f 4f       	sbci	r17, 0xFF	; 255
 bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <vfprintf+0x1f6>
 bc6:	60 81       	ld	r22, Z
 bc8:	71 81       	ldd	r23, Z+1	; 0x01
 bca:	07 2e       	mov	r0, r23
 bcc:	00 0c       	add	r0, r0
 bce:	88 0b       	sbc	r24, r24
 bd0:	99 0b       	sbc	r25, r25
 bd2:	0e 5f       	subi	r16, 0xFE	; 254
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	f3 2d       	mov	r31, r3
 bd8:	ff 76       	andi	r31, 0x6F	; 111
 bda:	3f 2e       	mov	r3, r31
 bdc:	97 ff       	sbrs	r25, 7
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x212>
 be0:	90 95       	com	r25
 be2:	80 95       	com	r24
 be4:	70 95       	com	r23
 be6:	61 95       	neg	r22
 be8:	7f 4f       	sbci	r23, 0xFF	; 255
 bea:	8f 4f       	sbci	r24, 0xFF	; 255
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	f0 68       	ori	r31, 0x80	; 128
 bf0:	3f 2e       	mov	r3, r31
 bf2:	2a e0       	ldi	r18, 0x0A	; 10
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	a3 01       	movw	r20, r6
 bf8:	0e 94 23 07 	call	0xe46	; 0xe46 <__ultoa_invert>
 bfc:	88 2e       	mov	r8, r24
 bfe:	86 18       	sub	r8, r6
 c00:	45 c0       	rjmp	.+138    	; 0xc8c <vfprintf+0x2ac>
 c02:	85 37       	cpi	r24, 0x75	; 117
 c04:	31 f4       	brne	.+12     	; 0xc12 <vfprintf+0x232>
 c06:	23 2d       	mov	r18, r3
 c08:	2f 7e       	andi	r18, 0xEF	; 239
 c0a:	b2 2e       	mov	r11, r18
 c0c:	2a e0       	ldi	r18, 0x0A	; 10
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	25 c0       	rjmp	.+74     	; 0xc5c <vfprintf+0x27c>
 c12:	93 2d       	mov	r25, r3
 c14:	99 7f       	andi	r25, 0xF9	; 249
 c16:	b9 2e       	mov	r11, r25
 c18:	8f 36       	cpi	r24, 0x6F	; 111
 c1a:	c1 f0       	breq	.+48     	; 0xc4c <vfprintf+0x26c>
 c1c:	18 f4       	brcc	.+6      	; 0xc24 <vfprintf+0x244>
 c1e:	88 35       	cpi	r24, 0x58	; 88
 c20:	79 f0       	breq	.+30     	; 0xc40 <vfprintf+0x260>
 c22:	b5 c0       	rjmp	.+362    	; 0xd8e <vfprintf+0x3ae>
 c24:	80 37       	cpi	r24, 0x70	; 112
 c26:	19 f0       	breq	.+6      	; 0xc2e <vfprintf+0x24e>
 c28:	88 37       	cpi	r24, 0x78	; 120
 c2a:	21 f0       	breq	.+8      	; 0xc34 <vfprintf+0x254>
 c2c:	b0 c0       	rjmp	.+352    	; 0xd8e <vfprintf+0x3ae>
 c2e:	e9 2f       	mov	r30, r25
 c30:	e0 61       	ori	r30, 0x10	; 16
 c32:	be 2e       	mov	r11, r30
 c34:	b4 fe       	sbrs	r11, 4
 c36:	0d c0       	rjmp	.+26     	; 0xc52 <vfprintf+0x272>
 c38:	fb 2d       	mov	r31, r11
 c3a:	f4 60       	ori	r31, 0x04	; 4
 c3c:	bf 2e       	mov	r11, r31
 c3e:	09 c0       	rjmp	.+18     	; 0xc52 <vfprintf+0x272>
 c40:	34 fe       	sbrs	r3, 4
 c42:	0a c0       	rjmp	.+20     	; 0xc58 <vfprintf+0x278>
 c44:	29 2f       	mov	r18, r25
 c46:	26 60       	ori	r18, 0x06	; 6
 c48:	b2 2e       	mov	r11, r18
 c4a:	06 c0       	rjmp	.+12     	; 0xc58 <vfprintf+0x278>
 c4c:	28 e0       	ldi	r18, 0x08	; 8
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	05 c0       	rjmp	.+10     	; 0xc5c <vfprintf+0x27c>
 c52:	20 e1       	ldi	r18, 0x10	; 16
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x27c>
 c58:	20 e1       	ldi	r18, 0x10	; 16
 c5a:	32 e0       	ldi	r19, 0x02	; 2
 c5c:	f8 01       	movw	r30, r16
 c5e:	b7 fe       	sbrs	r11, 7
 c60:	07 c0       	rjmp	.+14     	; 0xc70 <vfprintf+0x290>
 c62:	60 81       	ld	r22, Z
 c64:	71 81       	ldd	r23, Z+1	; 0x01
 c66:	82 81       	ldd	r24, Z+2	; 0x02
 c68:	93 81       	ldd	r25, Z+3	; 0x03
 c6a:	0c 5f       	subi	r16, 0xFC	; 252
 c6c:	1f 4f       	sbci	r17, 0xFF	; 255
 c6e:	06 c0       	rjmp	.+12     	; 0xc7c <vfprintf+0x29c>
 c70:	60 81       	ld	r22, Z
 c72:	71 81       	ldd	r23, Z+1	; 0x01
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 5f       	subi	r16, 0xFE	; 254
 c7a:	1f 4f       	sbci	r17, 0xFF	; 255
 c7c:	a3 01       	movw	r20, r6
 c7e:	0e 94 23 07 	call	0xe46	; 0xe46 <__ultoa_invert>
 c82:	88 2e       	mov	r8, r24
 c84:	86 18       	sub	r8, r6
 c86:	fb 2d       	mov	r31, r11
 c88:	ff 77       	andi	r31, 0x7F	; 127
 c8a:	3f 2e       	mov	r3, r31
 c8c:	36 fe       	sbrs	r3, 6
 c8e:	0d c0       	rjmp	.+26     	; 0xcaa <vfprintf+0x2ca>
 c90:	23 2d       	mov	r18, r3
 c92:	2e 7f       	andi	r18, 0xFE	; 254
 c94:	a2 2e       	mov	r10, r18
 c96:	89 14       	cp	r8, r9
 c98:	58 f4       	brcc	.+22     	; 0xcb0 <vfprintf+0x2d0>
 c9a:	34 fe       	sbrs	r3, 4
 c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <vfprintf+0x2d4>
 c9e:	32 fc       	sbrc	r3, 2
 ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <vfprintf+0x2d4>
 ca2:	83 2d       	mov	r24, r3
 ca4:	8e 7e       	andi	r24, 0xEE	; 238
 ca6:	a8 2e       	mov	r10, r24
 ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x2d4>
 caa:	b8 2c       	mov	r11, r8
 cac:	a3 2c       	mov	r10, r3
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <vfprintf+0x2d6>
 cb0:	b8 2c       	mov	r11, r8
 cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <vfprintf+0x2d6>
 cb4:	b9 2c       	mov	r11, r9
 cb6:	a4 fe       	sbrs	r10, 4
 cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <vfprintf+0x2f8>
 cba:	fe 01       	movw	r30, r28
 cbc:	e8 0d       	add	r30, r8
 cbe:	f1 1d       	adc	r31, r1
 cc0:	80 81       	ld	r24, Z
 cc2:	80 33       	cpi	r24, 0x30	; 48
 cc4:	21 f4       	brne	.+8      	; 0xcce <vfprintf+0x2ee>
 cc6:	9a 2d       	mov	r25, r10
 cc8:	99 7e       	andi	r25, 0xE9	; 233
 cca:	a9 2e       	mov	r10, r25
 ccc:	09 c0       	rjmp	.+18     	; 0xce0 <vfprintf+0x300>
 cce:	a2 fe       	sbrs	r10, 2
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x2fe>
 cd2:	b3 94       	inc	r11
 cd4:	b3 94       	inc	r11
 cd6:	04 c0       	rjmp	.+8      	; 0xce0 <vfprintf+0x300>
 cd8:	8a 2d       	mov	r24, r10
 cda:	86 78       	andi	r24, 0x86	; 134
 cdc:	09 f0       	breq	.+2      	; 0xce0 <vfprintf+0x300>
 cde:	b3 94       	inc	r11
 ce0:	a3 fc       	sbrc	r10, 3
 ce2:	11 c0       	rjmp	.+34     	; 0xd06 <vfprintf+0x326>
 ce4:	a0 fe       	sbrs	r10, 0
 ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <vfprintf+0x314>
 ce8:	b2 14       	cp	r11, r2
 cea:	88 f4       	brcc	.+34     	; 0xd0e <vfprintf+0x32e>
 cec:	28 0c       	add	r2, r8
 cee:	92 2c       	mov	r9, r2
 cf0:	9b 18       	sub	r9, r11
 cf2:	0e c0       	rjmp	.+28     	; 0xd10 <vfprintf+0x330>
 cf4:	b2 14       	cp	r11, r2
 cf6:	60 f4       	brcc	.+24     	; 0xd10 <vfprintf+0x330>
 cf8:	b6 01       	movw	r22, r12
 cfa:	80 e2       	ldi	r24, 0x20	; 32
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d02:	b3 94       	inc	r11
 d04:	f7 cf       	rjmp	.-18     	; 0xcf4 <vfprintf+0x314>
 d06:	b2 14       	cp	r11, r2
 d08:	18 f4       	brcc	.+6      	; 0xd10 <vfprintf+0x330>
 d0a:	2b 18       	sub	r2, r11
 d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x332>
 d0e:	98 2c       	mov	r9, r8
 d10:	21 2c       	mov	r2, r1
 d12:	a4 fe       	sbrs	r10, 4
 d14:	10 c0       	rjmp	.+32     	; 0xd36 <vfprintf+0x356>
 d16:	b6 01       	movw	r22, r12
 d18:	80 e3       	ldi	r24, 0x30	; 48
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d20:	a2 fe       	sbrs	r10, 2
 d22:	17 c0       	rjmp	.+46     	; 0xd52 <vfprintf+0x372>
 d24:	a1 fc       	sbrc	r10, 1
 d26:	03 c0       	rjmp	.+6      	; 0xd2e <vfprintf+0x34e>
 d28:	88 e7       	ldi	r24, 0x78	; 120
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x352>
 d2e:	88 e5       	ldi	r24, 0x58	; 88
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	b6 01       	movw	r22, r12
 d34:	0c c0       	rjmp	.+24     	; 0xd4e <vfprintf+0x36e>
 d36:	8a 2d       	mov	r24, r10
 d38:	86 78       	andi	r24, 0x86	; 134
 d3a:	59 f0       	breq	.+22     	; 0xd52 <vfprintf+0x372>
 d3c:	a1 fe       	sbrs	r10, 1
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x364>
 d40:	8b e2       	ldi	r24, 0x2B	; 43
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x366>
 d44:	80 e2       	ldi	r24, 0x20	; 32
 d46:	a7 fc       	sbrc	r10, 7
 d48:	8d e2       	ldi	r24, 0x2D	; 45
 d4a:	b6 01       	movw	r22, r12
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d52:	89 14       	cp	r8, r9
 d54:	38 f4       	brcc	.+14     	; 0xd64 <vfprintf+0x384>
 d56:	b6 01       	movw	r22, r12
 d58:	80 e3       	ldi	r24, 0x30	; 48
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d60:	9a 94       	dec	r9
 d62:	f7 cf       	rjmp	.-18     	; 0xd52 <vfprintf+0x372>
 d64:	8a 94       	dec	r8
 d66:	f3 01       	movw	r30, r6
 d68:	e8 0d       	add	r30, r8
 d6a:	f1 1d       	adc	r31, r1
 d6c:	80 81       	ld	r24, Z
 d6e:	b6 01       	movw	r22, r12
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d76:	81 10       	cpse	r8, r1
 d78:	f5 cf       	rjmp	.-22     	; 0xd64 <vfprintf+0x384>
 d7a:	22 20       	and	r2, r2
 d7c:	09 f4       	brne	.+2      	; 0xd80 <vfprintf+0x3a0>
 d7e:	42 ce       	rjmp	.-892    	; 0xa04 <vfprintf+0x24>
 d80:	b6 01       	movw	r22, r12
 d82:	80 e2       	ldi	r24, 0x20	; 32
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d8a:	2a 94       	dec	r2
 d8c:	f6 cf       	rjmp	.-20     	; 0xd7a <vfprintf+0x39a>
 d8e:	f6 01       	movw	r30, r12
 d90:	86 81       	ldd	r24, Z+6	; 0x06
 d92:	97 81       	ldd	r25, Z+7	; 0x07
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x3ba>
 d96:	8f ef       	ldi	r24, 0xFF	; 255
 d98:	9f ef       	ldi	r25, 0xFF	; 255
 d9a:	2b 96       	adiw	r28, 0x0b	; 11
 d9c:	e2 e1       	ldi	r30, 0x12	; 18
 d9e:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__epilogue_restores__>

00000da2 <strnlen_P>:
 da2:	fc 01       	movw	r30, r24
 da4:	05 90       	lpm	r0, Z+
 da6:	61 50       	subi	r22, 0x01	; 1
 da8:	70 40       	sbci	r23, 0x00	; 0
 daa:	01 10       	cpse	r0, r1
 dac:	d8 f7       	brcc	.-10     	; 0xda4 <strnlen_P+0x2>
 dae:	80 95       	com	r24
 db0:	90 95       	com	r25
 db2:	8e 0f       	add	r24, r30
 db4:	9f 1f       	adc	r25, r31
 db6:	08 95       	ret

00000db8 <strnlen>:
 db8:	fc 01       	movw	r30, r24
 dba:	61 50       	subi	r22, 0x01	; 1
 dbc:	70 40       	sbci	r23, 0x00	; 0
 dbe:	01 90       	ld	r0, Z+
 dc0:	01 10       	cpse	r0, r1
 dc2:	d8 f7       	brcc	.-10     	; 0xdba <strnlen+0x2>
 dc4:	80 95       	com	r24
 dc6:	90 95       	com	r25
 dc8:	8e 0f       	add	r24, r30
 dca:	9f 1f       	adc	r25, r31
 dcc:	08 95       	ret

00000dce <fputc>:
 dce:	0f 93       	push	r16
 dd0:	1f 93       	push	r17
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
 dd6:	fb 01       	movw	r30, r22
 dd8:	23 81       	ldd	r18, Z+3	; 0x03
 dda:	21 fd       	sbrc	r18, 1
 ddc:	03 c0       	rjmp	.+6      	; 0xde4 <fputc+0x16>
 dde:	8f ef       	ldi	r24, 0xFF	; 255
 de0:	9f ef       	ldi	r25, 0xFF	; 255
 de2:	2c c0       	rjmp	.+88     	; 0xe3c <fputc+0x6e>
 de4:	22 ff       	sbrs	r18, 2
 de6:	16 c0       	rjmp	.+44     	; 0xe14 <fputc+0x46>
 de8:	46 81       	ldd	r20, Z+6	; 0x06
 dea:	57 81       	ldd	r21, Z+7	; 0x07
 dec:	24 81       	ldd	r18, Z+4	; 0x04
 dee:	35 81       	ldd	r19, Z+5	; 0x05
 df0:	42 17       	cp	r20, r18
 df2:	53 07       	cpc	r21, r19
 df4:	44 f4       	brge	.+16     	; 0xe06 <fputc+0x38>
 df6:	a0 81       	ld	r26, Z
 df8:	b1 81       	ldd	r27, Z+1	; 0x01
 dfa:	9d 01       	movw	r18, r26
 dfc:	2f 5f       	subi	r18, 0xFF	; 255
 dfe:	3f 4f       	sbci	r19, 0xFF	; 255
 e00:	31 83       	std	Z+1, r19	; 0x01
 e02:	20 83       	st	Z, r18
 e04:	8c 93       	st	X, r24
 e06:	26 81       	ldd	r18, Z+6	; 0x06
 e08:	37 81       	ldd	r19, Z+7	; 0x07
 e0a:	2f 5f       	subi	r18, 0xFF	; 255
 e0c:	3f 4f       	sbci	r19, 0xFF	; 255
 e0e:	37 83       	std	Z+7, r19	; 0x07
 e10:	26 83       	std	Z+6, r18	; 0x06
 e12:	14 c0       	rjmp	.+40     	; 0xe3c <fputc+0x6e>
 e14:	8b 01       	movw	r16, r22
 e16:	ec 01       	movw	r28, r24
 e18:	fb 01       	movw	r30, r22
 e1a:	00 84       	ldd	r0, Z+8	; 0x08
 e1c:	f1 85       	ldd	r31, Z+9	; 0x09
 e1e:	e0 2d       	mov	r30, r0
 e20:	09 95       	icall
 e22:	89 2b       	or	r24, r25
 e24:	e1 f6       	brne	.-72     	; 0xdde <fputc+0x10>
 e26:	d8 01       	movw	r26, r16
 e28:	16 96       	adiw	r26, 0x06	; 6
 e2a:	8d 91       	ld	r24, X+
 e2c:	9c 91       	ld	r25, X
 e2e:	17 97       	sbiw	r26, 0x07	; 7
 e30:	01 96       	adiw	r24, 0x01	; 1
 e32:	17 96       	adiw	r26, 0x07	; 7
 e34:	9c 93       	st	X, r25
 e36:	8e 93       	st	-X, r24
 e38:	16 97       	sbiw	r26, 0x06	; 6
 e3a:	ce 01       	movw	r24, r28
 e3c:	df 91       	pop	r29
 e3e:	cf 91       	pop	r28
 e40:	1f 91       	pop	r17
 e42:	0f 91       	pop	r16
 e44:	08 95       	ret

00000e46 <__ultoa_invert>:
 e46:	fa 01       	movw	r30, r20
 e48:	aa 27       	eor	r26, r26
 e4a:	28 30       	cpi	r18, 0x08	; 8
 e4c:	51 f1       	breq	.+84     	; 0xea2 <__ultoa_invert+0x5c>
 e4e:	20 31       	cpi	r18, 0x10	; 16
 e50:	81 f1       	breq	.+96     	; 0xeb2 <__ultoa_invert+0x6c>
 e52:	e8 94       	clt
 e54:	6f 93       	push	r22
 e56:	6e 7f       	andi	r22, 0xFE	; 254
 e58:	6e 5f       	subi	r22, 0xFE	; 254
 e5a:	7f 4f       	sbci	r23, 0xFF	; 255
 e5c:	8f 4f       	sbci	r24, 0xFF	; 255
 e5e:	9f 4f       	sbci	r25, 0xFF	; 255
 e60:	af 4f       	sbci	r26, 0xFF	; 255
 e62:	b1 e0       	ldi	r27, 0x01	; 1
 e64:	3e d0       	rcall	.+124    	; 0xee2 <__ultoa_invert+0x9c>
 e66:	b4 e0       	ldi	r27, 0x04	; 4
 e68:	3c d0       	rcall	.+120    	; 0xee2 <__ultoa_invert+0x9c>
 e6a:	67 0f       	add	r22, r23
 e6c:	78 1f       	adc	r23, r24
 e6e:	89 1f       	adc	r24, r25
 e70:	9a 1f       	adc	r25, r26
 e72:	a1 1d       	adc	r26, r1
 e74:	68 0f       	add	r22, r24
 e76:	79 1f       	adc	r23, r25
 e78:	8a 1f       	adc	r24, r26
 e7a:	91 1d       	adc	r25, r1
 e7c:	a1 1d       	adc	r26, r1
 e7e:	6a 0f       	add	r22, r26
 e80:	71 1d       	adc	r23, r1
 e82:	81 1d       	adc	r24, r1
 e84:	91 1d       	adc	r25, r1
 e86:	a1 1d       	adc	r26, r1
 e88:	20 d0       	rcall	.+64     	; 0xeca <__ultoa_invert+0x84>
 e8a:	09 f4       	brne	.+2      	; 0xe8e <__ultoa_invert+0x48>
 e8c:	68 94       	set
 e8e:	3f 91       	pop	r19
 e90:	2a e0       	ldi	r18, 0x0A	; 10
 e92:	26 9f       	mul	r18, r22
 e94:	11 24       	eor	r1, r1
 e96:	30 19       	sub	r19, r0
 e98:	30 5d       	subi	r19, 0xD0	; 208
 e9a:	31 93       	st	Z+, r19
 e9c:	de f6       	brtc	.-74     	; 0xe54 <__ultoa_invert+0xe>
 e9e:	cf 01       	movw	r24, r30
 ea0:	08 95       	ret
 ea2:	46 2f       	mov	r20, r22
 ea4:	47 70       	andi	r20, 0x07	; 7
 ea6:	40 5d       	subi	r20, 0xD0	; 208
 ea8:	41 93       	st	Z+, r20
 eaa:	b3 e0       	ldi	r27, 0x03	; 3
 eac:	0f d0       	rcall	.+30     	; 0xecc <__ultoa_invert+0x86>
 eae:	c9 f7       	brne	.-14     	; 0xea2 <__ultoa_invert+0x5c>
 eb0:	f6 cf       	rjmp	.-20     	; 0xe9e <__ultoa_invert+0x58>
 eb2:	46 2f       	mov	r20, r22
 eb4:	4f 70       	andi	r20, 0x0F	; 15
 eb6:	40 5d       	subi	r20, 0xD0	; 208
 eb8:	4a 33       	cpi	r20, 0x3A	; 58
 eba:	18 f0       	brcs	.+6      	; 0xec2 <__ultoa_invert+0x7c>
 ebc:	49 5d       	subi	r20, 0xD9	; 217
 ebe:	31 fd       	sbrc	r19, 1
 ec0:	40 52       	subi	r20, 0x20	; 32
 ec2:	41 93       	st	Z+, r20
 ec4:	02 d0       	rcall	.+4      	; 0xeca <__ultoa_invert+0x84>
 ec6:	a9 f7       	brne	.-22     	; 0xeb2 <__ultoa_invert+0x6c>
 ec8:	ea cf       	rjmp	.-44     	; 0xe9e <__ultoa_invert+0x58>
 eca:	b4 e0       	ldi	r27, 0x04	; 4
 ecc:	a6 95       	lsr	r26
 ece:	97 95       	ror	r25
 ed0:	87 95       	ror	r24
 ed2:	77 95       	ror	r23
 ed4:	67 95       	ror	r22
 ed6:	ba 95       	dec	r27
 ed8:	c9 f7       	brne	.-14     	; 0xecc <__ultoa_invert+0x86>
 eda:	00 97       	sbiw	r24, 0x00	; 0
 edc:	61 05       	cpc	r22, r1
 ede:	71 05       	cpc	r23, r1
 ee0:	08 95       	ret
 ee2:	9b 01       	movw	r18, r22
 ee4:	ac 01       	movw	r20, r24
 ee6:	0a 2e       	mov	r0, r26
 ee8:	06 94       	lsr	r0
 eea:	57 95       	ror	r21
 eec:	47 95       	ror	r20
 eee:	37 95       	ror	r19
 ef0:	27 95       	ror	r18
 ef2:	ba 95       	dec	r27
 ef4:	c9 f7       	brne	.-14     	; 0xee8 <__ultoa_invert+0xa2>
 ef6:	62 0f       	add	r22, r18
 ef8:	73 1f       	adc	r23, r19
 efa:	84 1f       	adc	r24, r20
 efc:	95 1f       	adc	r25, r21
 efe:	a0 1d       	adc	r26, r0
 f00:	08 95       	ret

00000f02 <__prologue_saves__>:
 f02:	2f 92       	push	r2
 f04:	3f 92       	push	r3
 f06:	4f 92       	push	r4
 f08:	5f 92       	push	r5
 f0a:	6f 92       	push	r6
 f0c:	7f 92       	push	r7
 f0e:	8f 92       	push	r8
 f10:	9f 92       	push	r9
 f12:	af 92       	push	r10
 f14:	bf 92       	push	r11
 f16:	cf 92       	push	r12
 f18:	df 92       	push	r13
 f1a:	ef 92       	push	r14
 f1c:	ff 92       	push	r15
 f1e:	0f 93       	push	r16
 f20:	1f 93       	push	r17
 f22:	cf 93       	push	r28
 f24:	df 93       	push	r29
 f26:	cd b7       	in	r28, 0x3d	; 61
 f28:	de b7       	in	r29, 0x3e	; 62
 f2a:	ca 1b       	sub	r28, r26
 f2c:	db 0b       	sbc	r29, r27
 f2e:	0f b6       	in	r0, 0x3f	; 63
 f30:	f8 94       	cli
 f32:	de bf       	out	0x3e, r29	; 62
 f34:	0f be       	out	0x3f, r0	; 63
 f36:	cd bf       	out	0x3d, r28	; 61
 f38:	09 94       	ijmp

00000f3a <__epilogue_restores__>:
 f3a:	2a 88       	ldd	r2, Y+18	; 0x12
 f3c:	39 88       	ldd	r3, Y+17	; 0x11
 f3e:	48 88       	ldd	r4, Y+16	; 0x10
 f40:	5f 84       	ldd	r5, Y+15	; 0x0f
 f42:	6e 84       	ldd	r6, Y+14	; 0x0e
 f44:	7d 84       	ldd	r7, Y+13	; 0x0d
 f46:	8c 84       	ldd	r8, Y+12	; 0x0c
 f48:	9b 84       	ldd	r9, Y+11	; 0x0b
 f4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f4c:	b9 84       	ldd	r11, Y+9	; 0x09
 f4e:	c8 84       	ldd	r12, Y+8	; 0x08
 f50:	df 80       	ldd	r13, Y+7	; 0x07
 f52:	ee 80       	ldd	r14, Y+6	; 0x06
 f54:	fd 80       	ldd	r15, Y+5	; 0x05
 f56:	0c 81       	ldd	r16, Y+4	; 0x04
 f58:	1b 81       	ldd	r17, Y+3	; 0x03
 f5a:	aa 81       	ldd	r26, Y+2	; 0x02
 f5c:	b9 81       	ldd	r27, Y+1	; 0x01
 f5e:	ce 0f       	add	r28, r30
 f60:	d1 1d       	adc	r29, r1
 f62:	0f b6       	in	r0, 0x3f	; 63
 f64:	f8 94       	cli
 f66:	de bf       	out	0x3e, r29	; 62
 f68:	0f be       	out	0x3f, r0	; 63
 f6a:	cd bf       	out	0x3d, r28	; 61
 f6c:	ed 01       	movw	r28, r26
 f6e:	08 95       	ret

00000f70 <_exit>:
 f70:	f8 94       	cli

00000f72 <__stop_program>:
 f72:	ff cf       	rjmp	.-2      	; 0xf72 <__stop_program>
